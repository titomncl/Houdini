<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->


  <tool name="object_freeze" label="Freeze" icon="SHELF_freezetransforms">
    <helpURL>tool:freeze</helpURL>
    <script scriptType="python"><![CDATA[import objecttoolutils
import toolutils


# Determine context
active_pane = toolutils.activePane(kwargs)
scene_viewer = toolutils.sceneViewer()
pwd = scene_viewer.pwd()

# Prompt selection
selected = scene_viewer.selectObjects(
                prompt = toolutils.selectionPrompt(hou.objNodeTypeCategory()),
                allow_multisel = True,
                allowed_types = ("geo",))
if len(selected) == 0:
    raise hou.Error("Nothing was selected")
objecttoolutils.freeze(selected)]]></script>
  </tool>

  <tool name="object_matchtransform" label="Match Transform" icon="SHELF_matchtransform">
    <helpURL>tool:matchtransform</helpURL>
    <script scriptType="python"><![CDATA[import objecttoolutils
import toolutils

scene_viewer = toolutils.sceneViewer()
targets = scene_viewer.selectObjects(
                prompt = toolutils.selectionPrompt(hou.objNodeTypeCategory()),
                allow_multisel = True)
if len(targets) == 0:
    raise hou.Error("Nothing was selected")
for target in targets:
    target.setSelected(False)
sources = scene_viewer.selectObjects(
                prompt = "Select object to match",
		quick_select = True,
		allow_multisel = False)
if len(sources) == 0:
    raise hou.Error("No object to match was selected")
xform = sources[0].worldTransform()
for target in targets:
    target.setWorldTransform(xform)
]]></script>
  </tool>

  <tool name="tool_align" label="Align Components" icon="SHELF_aligncomponents">
    <helpURL>tool:aligncomponents</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Utility</toolSubmenu>
    <script scriptType="python"><![CDATA[import alignutils

alignutils.interactiveAlign()
]]></script>
  </tool>

  <tool name="vex_bindexport" label="Bind Export" icon="VOP_bind">
    <helpURL>operator:Vop/bind</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>VOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Vop/bind</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Utility</toolSubmenu>
    <script scriptType="python"><![CDATA[
import voptoolutils
import toolutils

node = voptoolutils.genericTool(kwargs, 'bind')
node.parm('exportparm').set('whenconnected')
node.parm('useasparmdefiner').set(True)
node.parm('overridetype').set(True)

# Because the bind vop node did not have a connector before the 'exportparm'
# was set, the connection could not be made. But now it can.
pane = toolutils.activePane(kwargs)
if isinstance(pane, hou.PathBasedPaneTab):
    container = pane.pwd()
    outputindex = kwargs.get('outputindex', -1)
    inputnode   = container.node(kwargs.get('inputnodename', ''))
    if outputindex >= 0 and inputnode is not None:
	node.setInput(0, inputnode, outputindex)
]]></script>
  </tool>

  <tool name="vex_if" label="If Block" icon="VOP_if">
    <helpURL>operator:Vop/block_begin_if</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>VOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Vop/block_begin_if</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Control Flow</toolSubmenu>
    <script scriptType="python"><![CDATA[
import voptoolutils
import toolutils

voptoolutils.buildBlockPair(kwargs, 'if', 'block_begin_if', 'block_end', True)
]]></script>
  </tool>

  <tool name="vex_while" label="While Loop" icon="VOP_while">
    <helpURL>operator:Vop/block_end_while</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>VOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Vop/block_end_while</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Control Flow</toolSubmenu>
    <script scriptType="python"><![CDATA[
import voptoolutils
import toolutils

voptoolutils.buildBlockPair(kwargs, 'while', 'block_begin_if', 'block_end_while', False)
]]></script>
  </tool>

  <tool name="vex_dowhile" label="Do-While Loop" icon="VOP_while">
    <helpURL>operator:Vop/block_end_while</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>VOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Vop/block_end_while</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Control Flow</toolSubmenu>
    <script scriptType="python"><![CDATA[
import voptoolutils
import toolutils

voptoolutils.buildBlockPair(kwargs, 'do_while', 'block_begin', 'block_end_while', False)
]]></script>
  </tool>

  <tool name="vex_for" label="For Loop" icon="VOP_for">
    <helpURL>operator:Vop/block_begin_for</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>VOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Vop/block_begin_for</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Control Flow</toolSubmenu>
    <script scriptType="python"><![CDATA[
import voptoolutils
import toolutils

voptoolutils.buildBlockPair(kwargs, 'for', 'block_begin_for', 'block_end', False)
]]></script>
  </tool>

  <tool name="vex_foreach" label="For-Each Loop" icon="VOP_foreach">
    <helpURL>operator:Vop/block_begin_foreach</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>VOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Vop/block_begin_foreach</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Control Flow</toolSubmenu>
    <script scriptType="python"><![CDATA[
import voptoolutils
import toolutils

voptoolutils.buildBlockPair(kwargs, 'foreach', 'block_begin_foreach', 'block_end', False)
]]></script>
  </tool>

  <tool name="vex_foruntil" label="For Loop Until" icon="VOP_for">
    <helpURL>operator:Vop/block_begin_for</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>VOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Vop/block_begin_for</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Control Flow</toolSubmenu>
    <script scriptType="python"><![CDATA[
import voptoolutils
import toolutils

voptoolutils.buildBlockPair(kwargs, 'for_until', 'block_begin_for', 'block_end_breakif', False)
]]></script>
  </tool>

  <tool name="vex_foreachuntil" label="For-Each Loop Until" icon="VOP_foreach">
    <helpURL>operator:Vop/block_begin_foreach</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>VOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Vop/block_begin_foreach</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Control Flow</toolSubmenu>
    <script scriptType="python"><![CDATA[
import voptoolutils
import toolutils

voptoolutils.buildBlockPair(kwargs, 'foreach_until', 'block_begin_foreach', 'block_end_breakif', False)
]]></script>
  </tool>

  <tool name="vop_subnetconnector" label="Subnet Input Connector" icon="VOP_subnetconnector">
    <helpURL>operator:Vop/subnetconnector</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>VOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Vop/subnetconnector</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Utility</toolSubmenu>
    <script scriptType="python"><![CDATA[import voptoolutils

voptoolutils.genericTool(kwargs, 'subnetconnector', 'subnetinput')]]></script>
  </tool>

  <tool name="vop_subnetconnectoroutput" label="Subnet Output Connector" icon="VOP_subnetconnector">
    <helpURL>operator:Vop/subnetconnector</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>VOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Vop/subnetconnector</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Utility</toolSubmenu>
    <script scriptType="python"><![CDATA[import voptoolutils
import toolutils

node = voptoolutils.genericTool(kwargs, 'subnetconnector', 'subnetoutput')
node.parm('connectorkind').set('output')
node.parm('useasparmdefiner').set(True)

# Because the bind vop node did not have a connector before the 'exportparm'
# was set, the connection could not be made. But now it can.
pane = toolutils.activePane(kwargs)
if isinstance(pane, hou.PathBasedPaneTab):
    container = pane.pwd()
    outputindex = kwargs.get('outputindex', -1)
    inputnode   = container.node(kwargs.get('inputnodename', ''))
    if outputindex >= 0 and inputnode is not None:
	node.setInput(0, inputnode, outputindex)]]></script>
  </tool>

  <tool name="vop_pbrnonmetallic" label="PBR Non-Metallic" icon="VOP_pbrnonmetallic">
    <helpURL>operator:Vop/pbrnonmetallic</helpURL>
    <toolSubmenu>Shading (BSDFs)</toolSubmenu>
    <script scriptType="python"><![CDATA[import voptoolutils

voptoolutils.genericTool(kwargs, 'pbrnonmetallic')]]></script>
  </tool>

  <tool name="vop_pbrglass" label="PBR Glass" icon="VOP_pbrglass">
    <helpURL>operator:Vop/pbrnonmetallic</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>VOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Vop/pbrnonmetallic</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Shading (BSDFs)</toolSubmenu>
    <script scriptType="python"><![CDATA[
import voptoolutils
import toolutils

node = voptoolutils.genericTool(kwargs, 'pbrnonmetallic', 'pbrglass1')
node.parm('shadebackface').set(True)
]]></script>
  </tool>

  <tool name="vop_pbrreflect" label="PBR Reflection" icon="VOP_pbrreflect">
    <helpURL>operator:Vop/pbrnonmetallic</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>VOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Vop/pbrnonmetallic</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Shading (BSDFs)</toolSubmenu>
    <script scriptType="python"><![CDATA[
import voptoolutils
import toolutils

node = voptoolutils.genericTool(kwargs, 'pbrnonmetallic', 'pbrreflect1')
node.parm('refract').set(0)
]]></script>
  </tool>

  <tool name="vop_pbrrefract" label="PBR Refraction" icon="VOP_pbrrefract">
    <helpURL>operator:Vop/pbrnonmetallic</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>VOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Vop/pbrnonmetallic</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Shading (BSDFs)</toolSubmenu>
    <script scriptType="python"><![CDATA[
import voptoolutils
import toolutils

node = voptoolutils.genericTool(kwargs, 'pbrnonmetallic', 'pbrrefract')
node.parm('reflect').set(0)
node.parm('shadebackface').set(True)
]]></script>
  </tool>

  <tool name="sop_ripple::2.0" label="Ripple" icon="SOP_ripple">
    <helpURL>operator:Sop/ripple</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/ripple</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils
from soptoolutils import OrientInfo

ripple = soptoolutils.genericTool(kwargs, 'ripple', orient=OrientInfo('up'))
ripple.parm('usecenter').set(True)
]]></script>
  </tool>

  <tool name="model_vertexvop" label="Vertex VOP" icon="SOP_vopsop">
    <helpURL>operator:Sop/attribvop</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/attribvop</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Utility</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
import toolutils

node = soptoolutils.genericTool(kwargs, 'attribvop')
node.setName('vertexvop1', unique_name=True)
node.parm('bindclass').set('vertex')
]]></script>
  </tool>

  <tool name="model_vertexwrangle" label="Vertex Wrangle" icon="SOP_attribwrangle">
    <helpURL>operator:Sop/attribwrangle</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/attribwrangle</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Utility</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
import toolutils

node = soptoolutils.genericTool(kwargs, 'attribwrangle', force_filter=True)
node.setName('vertexwrangle1', unique_name=True)
node.parm('class').set('vertex')
]]></script>
  </tool>

  <tool name="model_primitivevop" label="Primitive VOP" icon="SOP_vopsop">
    <helpURL>operator:Sop/attribvop</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/attribvop</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Utility</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
import toolutils

node = soptoolutils.genericTool(kwargs, 'attribvop')
node.setName('primitivevop1', unique_name=True)
node.parm('bindclass').set('primitive')
]]></script>
  </tool>

  <tool name="sop_attribpaint" label="Attribute Paint" icon="SOP_attribpaint">
    <helpURL>operator:Sop/attribpaint</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
        <contextOpType>Sop/attribpaint</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Attribute</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'attribpaint', force_filter=True)]]></script>
  </tool>

  <tool name="sop_attribwrangle" label="Attribute Wrangle" icon="SOP_attribwrangle">
    <helpURL>operator:Sop/attribwrangle</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
        <contextOpType>Sop/attribwrangle</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Attribute</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'attribwrangle', force_filter=True)]]></script>
  </tool>

  <tool name="model_primitivewrangle" label="Primitive Wrangle" icon="SOP_attribwrangle">
    <helpURL>operator:Sop/attribwrangle</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/attribwrangle</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Utility</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
import toolutils

node = soptoolutils.genericTool(kwargs, 'attribwrangle', force_filter=True)
node.setName('primitivewrangle1', unique_name=True)
node.parm('class').set('primitive')
]]></script>
  </tool>

  <tool name="model_pointvop" label="Point VOP" icon="SOP_vopsop">
    <helpURL>operator:Sop/attribvop</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/attribvop</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Utility</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
import toolutils

node = soptoolutils.genericTool(kwargs, 'attribvop')
node.setName('pointvop1', unique_name=True)
]]></script>
  </tool>

  <tool name="model_vertex" label="Vertex" icon="SOP_attribexpression">
    <helpURL>operator:Sop/attribexpression</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/attribexpression</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Utility</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
import toolutils

node = soptoolutils.genericTool(kwargs, 'attribexpression')
node.parm('bindclass').set('vertex')
node.setName('vertex1', unique_name=True)
]]></script>
  </tool>

  <tool name="model_point" label="Point" icon="SOP_attribexpression">
    <helpURL>operator:Sop/attribexpression</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/attribexpression</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Utility</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
import toolutils

node = soptoolutils.genericTool(kwargs, 'attribexpression')
node.setName('point1', unique_name=True)
]]></script>
  </tool>

  <tool name="model_pointwrangle" label="Point Wrangle" icon="SOP_pointwrangle">
    <helpURL>operator:Sop/attribwrangle</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/attribwrangle</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Utility</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
import toolutils

node = soptoolutils.genericTool(kwargs, 'attribwrangle', force_filter=True)
node.setName('pointwrangle1', unique_name=True)
]]></script>
  </tool>

  <tool name="geometry_uniquepoints" label="Unique Points" icon="SOP_splitpoints">
    <helpURL>operator:Sop/splitpoints</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/splitpoints</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Utility</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
import toolutils

node = soptoolutils.genericTool(kwargs, 'splitpoints', force_filter=True)
node.setName('uniquepoints1', unique_name=True)
]]></script>
  </tool>

  <tool name="geometry_vertexsplit" label="Vertex Split" icon="SOP_vertexsplit">
    <helpURL>operator:Sop/splitpoints</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/splitpoints</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Attribute</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
import toolutils

node = soptoolutils.genericTool(kwargs, 'splitpoints', force_filter=True)
node.setName('vertexsplit1', unique_name=True)
node.parm('useattrib').set(True)
node.parm('attribname').set('N')
]]></script>
  </tool>

  <tool name="geometry_splituvseams" label="Split UV Seams" icon="SOP_vertexsplit">
    <helpURL>operator:Sop/splitpoints</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/splitpoints</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Material</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
import toolutils

node = soptoolutils.genericTool(kwargs, 'splitpoints', force_filter=True)
node.setName('splituvseams1', unique_name=True)
node.parm('useattrib').set(True)
node.parm('attribname').set('uv')
]]></script>
  </tool>

  <tool name="geometry_primitivesplit" label="Primitive Split" icon="SOP_primitivesplit">
    <helpURL>operator:Sop/splitpoints</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/splitpoints</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Attribute</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
import toolutils

node = soptoolutils.genericTool(kwargs, 'splitpoints', force_filter=True)
node.setName('primitivesplit1', unique_name=True)
node.parm('useattrib').set(True)
node.parm('attribname').set('name')
]]></script>
  </tool>

  <tool name="geometry_curvesurface" label="Curve Surface" icon="SOP_sweep">
    <helpURL>operator:Sop/sweep::2.0</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/sweep::2.0</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Attribute</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
import toolutils

node = soptoolutils.genericTool(kwargs, 'sweep::2.0', force_filter=True)
node.setName('curvesurface1', unique_name=True)
node.parm('surfaceshape').set('tube')
]]></script>
  </tool>

  <tool name="model_heightfieldvop" label="HeightField VOP" icon="SOP_volumevop">
    <helpURL>operator:Sop/volumevop</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/volumevop</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Terrain</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
import toolutils

node = soptoolutils.genericTool(kwargs, 'volumevop')
node.setName('heightfield_vop1', unique_name=True)
bind = node.createNode('bind')
bind.parm('parmname').set('height')
]]></script>
  </tool>

  <tool name="model_heightfieldwrangle" label="HeightField Wrangle" icon="SOP_volumewrangle">
    <helpURL>operator:Sop/volumewrangle</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/volumewrangle</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Terrain</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
import toolutils

node = soptoolutils.genericTool(kwargs, 'volumewrangle', force_filter=True)
node.setName('heightfield_wrangle1', unique_name=True)
]]></script>
  </tool>

  <tool name="model_heightfieldtilesplice" label="HeightField Tile Splice" icon="SOP_volumesplice">
    <helpURL>operator:Sop/volumesplice</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/volumesplice</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Terrain</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
import toolutils

node = soptoolutils.genericTool(kwargs, 'volumesplice')
node.setName('heightfield_tilesplice1', unique_name=True)
]]></script>
  </tool>

  <tool name="model_heightfield_masknoise" label="HeightField Mask Noise" icon="SOP_heightfield_noise">
    <helpURL>operator:Sop/heightfield_noise</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/heightfield_noise</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Terrain</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
import toolutils

node = soptoolutils.genericTool(kwargs, 'heightfield_noise')
node.setName('heightfield_masknoise1', unique_name=True)
node.parm('layer').set('mask')
node.parm('amp').set(1.0)
node.parm('centernoise').set(False)
node.parm('dogain').set(True)
node.parm('gain').set(0.9)
]]></script>
  </tool>

  <tool name="model_heightmaskclear" label="HeightField Mask Clear" icon="SOP_heightfield_layerclear">
    <helpURL>operator:Sop/heightfield_layerclear</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/volumevop</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Terrain</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
import toolutils

node = soptoolutils.genericTool(kwargs, 'heightfield_layerclear')
node.setName('heightfield_maskclear1', unique_name=True)
node.parm('layer1').set('mask')
]]></script>
  </tool>

  <tool name="model_heightcutoutclear" label="HeightField Cutout Clear" icon="SOP_heightfield_layerclear">
    <helpURL>operator:Sop/heightfield_layerclear</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/volumevop</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Terrain</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
import toolutils

node = soptoolutils.genericTool(kwargs, 'heightfield_layerclear')
node.setName('heightfield_cutoutclear1', unique_name=True)
node.parm('layer1').set('Alpha')
node.parm('value1').set(1)
]]></script>
  </tool>

  <tool name="model_heightfield_maskblur" label="HeightField Mask Blur" icon="SOP_heightfield_blur">
    <helpURL>operator:Sop/heightfield_blur</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/heightfield_noise</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Terrain</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
import toolutils

node = soptoolutils.genericTool(kwargs, 'heightfield_blur')
node.setName('heightfield_maskblur1', unique_name=True)
node.parm('layer').set('mask')
]]></script>
  </tool>

  <tool name="model_heightfield_maskexpand" label="HeightField Mask Expand" icon="SOP_heightfield_blur">
    <helpURL>operator:Sop/heightfield_blur</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/heightfield_noise</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Terrain</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
import toolutils

node = soptoolutils.genericTool(kwargs, 'heightfield_blur')
node.setName('heightfield_maskexpand1', unique_name=True)
node.parm('layer').set('mask')
node.parm('method').set('expand')
]]></script>
  </tool>

  <tool name="model_heightfield_maskshrink" label="HeightField Mask Shrink" icon="SOP_heightfield_blur">
    <helpURL>operator:Sop/heightfield_blur</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/heightfield_noise</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Terrain</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
import toolutils

node = soptoolutils.genericTool(kwargs, 'heightfield_blur')
node.setName('heightfield_maskshrink1', unique_name=True)
node.parm('layer').set('mask')
node.parm('method').set('shrink')
]]></script>
  </tool>

  <tool name="model_popnet" label="POP Network" icon="NETWORKS_pop">
    <helpURL>operator:Sop/dopnet</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/dopnet</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Utility</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
import toolutils

node = soptoolutils.genericTool(kwargs, 'dopnet')

node.setName('popnet', unique_name=True)

output = node.displayNode()

solver = node.createNode('popsolver::2.0', 'popsolver')
object = node.createNode('popobject', 'popobject')
merge = node.createNode('merge', 'wire_pops_into_here')
source = node.createNode('popsource', 'source_first_input')
source.parm('usecontextgeo').set('first')

solver.setNextInput(object)

if output is not None:
    output.setInput(0, solver)
else:
    solver.setDisplayFlag(True)

solver.setInput(2, merge)

merge.setNextInput(source)

node.layoutChildren()

]]></script>
  </tool>

  <tool name="geometry_timeblend" label="Time Blend" icon="SOP_timeblend">
    <helpURL>operator:Sop/retime</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/retime</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Utility</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils

node = soptoolutils.genericTool(kwargs, 'retime')
node.setName('timeblend1', True)
node.parm('evalmode').set('shift')
node.parm('shiftframe').setExpression('ch("inputrangex")')
node.parm('ipostb').set('extend')
node.parm('doslerp').set(False)
node.parm('usevforpinterp').set(False)
]]></script>
  </tool>

  <tool name="geometry_timewarp" label="Time Warp" icon="SOP_timewarp">
    <helpURL>operator:Sop/retime</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/retime</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Utility</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils

node = soptoolutils.genericTool(kwargs, 'retime')
node.setName('timewarp1', True)
node.parm('evalmode').set('fit')
node.parm('outputrangex').deleteAllKeyframes()
node.parm('outputrangex').set(1)
node.parm('outputrangey').deleteAllKeyframes()
node.parm('outputrangey').set(100)
node.parm('interpolate').set(False)
]]></script>
  </tool>

  <tool name="geometry_compile" label="Compiled Block" icon="SOP_compile">
    <helpURL>operator:Sop/compile_end</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/compile_end</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Utility</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
import toolutils

soptoolutils.buildBlockPair(kwargs, 'compile', 'compile_begin', 'compile_end', False)
]]></script>
  </tool>

  <tool name="geometry_for" label="For-Loop with Feedback" icon="SOP_foreach">
    <helpURL>operator:Sop/block_end</helpURL>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/block_end</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Utility</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
import toolutils

(begin, end) = soptoolutils.buildBlockPair(kwargs, 'repeat', 'block_begin', 'block_end', False)
end.parm('itermethod').set('count')
]]></script>
  </tool>

  <tool name="geometry_foreachnamed" label="For-Each Named Primitive" icon="SOP_foreach">
    <helpURL>operator:Sop/block_end</helpURL>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/block_end</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Utility</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
import toolutils

(begin, end) = soptoolutils.buildBlockPair(kwargs, 'foreach', 'block_begin', 'block_end', False)
begin.parm('method').set('piece')
end.parm('method').set('merge')
end.parm('class').set('primitive')
end.parm('attrib').set('name')
end.parm('templatepath').set('../' + begin.name())
end.parm('itermethod').set('pieces')
]]></script>
  </tool>

  <tool name="geometry_foreachconnect" label="For-Each Connected Piece" icon="SOP_foreach">
    <helpURL>operator:Sop/block_end</helpURL>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/block_end</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Utility</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
import toolutils

connect = soptoolutils.genericTool(kwargs, 'connectivity')
connect.parm('connecttype').set('prim')

# We need to mark this build-block to auto-connect.
kwargs['shiftclick'] = True
kwargs['inputs'] = []
kwargs['outputs'] = []
kwargs['outputindex'] = 0

(begin, end) = soptoolutils.buildBlockPair(kwargs, 'foreach', 'block_begin', 'block_end', False)
begin.parm('method').set('piece')
end.parm('method').set('merge')
end.parm('class').set('primitive')
end.parm('attrib').set('class')
end.parm('templatepath').set('../' + begin.name())
end.parm('itermethod').set('pieces')
]]></script>
  </tool>

  <tool name="geometry_foreachpoint" label="For-Each Point" icon="SOP_foreach">
    <helpURL>operator:Sop/block_end</helpURL>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/block_end</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Utility</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
import toolutils

(begin, end) = soptoolutils.buildBlockPair(kwargs, 'foreach', 'block_begin', 'block_end', False)
begin.parm('method').set('piece')
end.parm('method').set('merge')
end.parm('class').set('point')
end.parm('useattrib').set(False)
end.parm('templatepath').set('../' + begin.name())
end.parm('itermethod').set('pieces')
]]></script>
  </tool>

  <tool name="geometry_foreachprim" label="For-Each Primitive" icon="SOP_foreach">
    <helpURL>operator:Sop/block_end</helpURL>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/block_end</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Utility</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
import toolutils

(begin, end) = soptoolutils.buildBlockPair(kwargs, 'foreach', 'block_begin', 'block_end', False)
begin.parm('method').set('piece')
end.parm('method').set('merge')
end.parm('class').set('primitive')
end.parm('useattrib').set(False)
end.parm('templatepath').set('../' + begin.name())
end.parm('itermethod').set('pieces')
]]></script>
  </tool>

  <tool name="geometry_foreachnumber" label="For-Each Number" icon="SOP_foreach">
    <helpURL>operator:Sop/block_end</helpURL>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/block_end</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Utility</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
import toolutils

(begin, end) = soptoolutils.buildBlockPair(kwargs, 'foreach', 'block_begin', 'block_end', False)

begin.parm('method').set('input')
end.parm('method').set('merge')
end.parm('itermethod').set('count')
end.parm('templatepath').set('../' + begin.name())
meta = soptoolutils.buildBlockMetadata(begin)
meta.setName('foreach_count1', True)
]]></script>
  </tool>

  <tool name="geometry_namefromgroup" label="Name from Groups" icon="SOP_name">
    <helpURL>tool:name</helpURL>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Group</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
import toolutils

node = soptoolutils.genericTool(kwargs, 'name', force_filter=True)
node.parm('numnames').set(0)
node.parm('donamefromgroup').set(True)
]]></script>
  </tool>



  <tool name="geometry_intersect" label="Boolean Intersect" icon="SOP_boolean">
    <helpURL>tool:boolean</helpURL>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils
n = soptoolutils.addBooleanTool(kwargs)
n.parm("booleanop").set("intersect")
]]></script>
  </tool>

  <tool name="geometry_union" label="Boolean Union" icon="SOP_boolean">
    <helpURL>tool:boolean</helpURL>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils
n = soptoolutils.addBooleanTool(kwargs)
n.parm("booleanop").set("union")
]]></script>
  </tool>

  <tool name="geometry_subtract" label="Boolean Subtract" icon="SOP_boolean">
    <helpURL>tool:boolean</helpURL>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils
n = soptoolutils.addBooleanTool(kwargs)
n.parm("booleanop").set("subtract")
]]></script>
  </tool>

  <tool name="geometry_shatter" label="Boolean Shatter" icon="SOP_boolean">
    <helpURL>tool:boolean</helpURL>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils
n = soptoolutils.addBooleanTool(kwargs)
n.parm("booleanop").set("shatter")
]]></script>
  </tool>

  <tool name="geometry_waves" label="Waves" icon="SHELF_oceanwaves">
    <helpURL>tool:waves</helpURL>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
   <script scriptType="python"><![CDATA[import soptoolutils

evalnode = soptoolutils.genericTool(kwargs, 'oceanevaluate')
spectrumnode = evalnode.parent().createNode('oceanspectrum')
spectrumnode.parm('windspeed').set(10)
evalnode.setNextInput(spectrumnode)
spectrumnode.moveToGoodPosition()
]]></script>
  </tool>

  <tool name="geometry_smallocean" label="Small Ocean" icon="SHELF_ocean_small">
    <helpURL>tool:smallocean</helpURL>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
   <script scriptType="python"><![CDATA[
import doptoolutils
import dopparticlefluidtoolutils
dopparticlefluidtoolutils.smallOcean(kwargs)]]></script>
  </tool>

  <tool name="geometry_largeocean" label="Large Ocean" icon="SHELF_ocean_large">
    <helpURL>tool:largeocean</helpURL>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
   <script scriptType="python"><![CDATA[
import doptoolutils
import dopparticlefluidtoolutils
dopparticlefluidtoolutils.largeOcean(kwargs)]]></script>
  </tool>

  <tool name="sop_waveform" label="Waveform" icon="SOP_waveform">
    <helpURL>operator:Sop/waveform</helpURL>
    <toolMenuContext name="network">
       <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="viewer">
       <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
   <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'waveform')]]></script>
  </tool>

  <tool name="sop_shatter" label="Shatter" icon="SOP_shatter">
    <helpURL>operator:Sop/shatter</helpURL>
    <toolMenuContext name="network">
        <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.scriptSopFilterTool(kwargs, 'shatter')]]></script>
  </tool>

  <tool name="sop_assemble" label="Assemble" icon="SOP_assemble">
    <helpURL>operator:Sop/assemble</helpURL>
    <toolMenuContext name="network">
       <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="viewer">
       <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.scriptSopFilterTool(kwargs, 'assemble')]]></script>
  </tool>

  <tool name="sky_rig" label="Sky Rig" icon="SOP_sky">
    <helpURL>operator:Sop/sky</helpURL>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import skytoolutils
skytoolutils.skySource(kwargs)
]]></script>
  </tool>

  <tool name="terrain_hills" label="Terrain: Hills" icon="SHELF_terrain_fx">
    <helpURL>tool:terrain_hills</helpURL>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import terraintoolutils
terraintoolutils.fxRockyLowLands(kwargs)
]]></script>
  </tool>

  <tool name="terrain_mountain" label="Terrain: Mountain" icon="SHELF_terrain_fx">
    <helpURL>tool:terrain_mountain</helpURL>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import terraintoolutils
terraintoolutils.fxMountain(kwargs)
]]></script>
  </tool>

  <tool name="terrain_valley" label="Terrain: Valley" icon="SHELF_terrain_fx">
    <helpURL>tool:terrain_valley</helpURL>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import terraintoolutils
terraintoolutils.fxValley(kwargs)
]]></script>
  </tool>

  <tool name="terrain_moonscape" label="Terrain: Moonscape" icon="SHELF_terrain_fx">
    <helpURL>tool:terrain_moonscape</helpURL>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import terraintoolutils
terraintoolutils.fxMoonscape(kwargs)
]]></script>
  </tool>

  <tool name="terrain_islands" label="Terrain: Islands" icon="SHELF_terrain_fx">
    <helpURL>tool:terrain_islands</helpURL>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import terraintoolutils
terraintoolutils.fxIslands(kwargs)
]]></script>
  </tool>

  <tool name="terrain_canyon" label="Terrain: Canyon" icon="SHELF_terrain_fx">
    <helpURL>tool:terrain_canyon</helpURL>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import terraintoolutils
terraintoolutils.fxCanyon(kwargs)
]]></script>
  </tool>

  <tool name="terrain_dunes" label="Terrain: Dunes" icon="SHELF_terrain_fx">
    <helpURL>tool:terrain_dunes</helpURL>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import terraintoolutils
terraintoolutils.fxDunes(kwargs)
]]></script>
  </tool>

  <tool name="sop_collision_geo" label="Game Engine Collision" icon="SOP_subdivide">
    <helpURL>tool:sop_collision_geo</helpURL>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/groupcreate</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Houdini Engine</toolSubmenu>
    <script scriptType="python"><![CDATA[import houdiniengineutils
houdiniengineutils.sopCollisionGeo(kwargs)
]]></script>
  </tool>

  <tool name="sop_unity_material" label="Unity Material" icon="SOP_material">
    <helpURL>tool:sop_unity_material</helpURL>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/attribcreate::2.0</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Houdini Engine</toolSubmenu>
    <script scriptType="python"><![CDATA[import houdiniengineutils
houdiniengineutils.sopUnityMaterial(kwargs)
]]></script>
  </tool>

  <tool name="sop_unreal_material" label="Unreal Material" icon="SOP_material">
    <helpURL>tool:sop_unreal_material</helpURL>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/attribcreate::2.0</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Houdini Engine</toolSubmenu>
    <script scriptType="python"><![CDATA[import houdiniengineutils
houdiniengineutils.sopUnrealMaterial(kwargs)
]]></script>
  </tool>

  <tool name="sop_maya_mayahardedge_to_attribute" label="Convert Maya Hard Edge to Attribute" icon="SOP_edgecusp">
    <helpURL>tool:sop_maya_mayahardedge_to_attribute</helpURL>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Houdini Engine</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import houdiniengineutils
houdiniengineutils.sopMayaHardEdgeToAttribute(kwargs)]]></script>
  </tool>

  <tool name="sop_maya_mayahardedge_to_group" label="Convert Maya Hard Edge to Group" icon="SOP_edgecusp">
    <helpURL>tool:sop_maya_mayahardedge_to_group</helpURL>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Houdini Engine</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import houdiniengineutils
houdiniengineutils.sopMayaHardEdgeToGroup(kwargs)]]></script>
  </tool>

  <tool name="cloud_create" label="Cloud Rig" icon="SHELF_cloudrig">
    <helpURL>tool:cloudrig</helpURL>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import cloudtoolutils
cloudtoolutils.cloudSource(kwargs)
]]></script>
  </tool>

  <tool name="cloud_light" label="Cloud Light" icon="SOP_cloudlight">
    <helpURL>operator:Sop/cloudlight</helpURL>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import cloudtoolutils
cloudtoolutils.cloudLight(kwargs)
]]></script>
  </tool>

  <tool name="sop_copytopoints::2.0" label="Copy to Points" icon="SOP_copy">
    <helpURL>operator:Sop/copytopoints</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/copytopoints::2.0</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Utility</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils
sop = soptoolutils.genericTool(kwargs, 'copytopoints::2.0')
sop.parm('resettargetattribs').pressButton()]]></script>
  </tool>

  <tool name="geometry_copy" label="Copy to Points" icon="SOP_copy">
    <helpURL>operator:Sop/copytopoints</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils
sop = soptoolutils.genericTool(kwargs, 'copytopoints::2.0')
sop.parm('resettargetattribs').pressButton()]]></script>
  </tool>

  <tool name="geometry_duplicate" label="Duplicate" icon="SOP_duplicate">
    <helpURL>operator:Sop/copyxform</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils

scene_viewer = toolutils.sceneViewer();
current_path = scene_viewer.pwd();
if current_path.childTypeCategory() == hou.objNodeTypeCategory():
    toolutils.genericStateTool(kwargs, 'objcopy')
else:
    node = soptoolutils.genericTool(kwargs, 'copyxform')
    try:
	inputnode = node.inputs()[0]
	ingeo = inputnode.geometry()
	groupstr = node.parm('sourcegroup').evalAsString()
	bbox = ingeo.primBoundingBox(groupstr)
	node.parmTuple('p').set(bbox.center())
    except:
	pass
    ]]></script>
  </tool>

  <tool name="sop_copytocurves" label="Copy to Curves" icon="SOP_copytocurves">
    <helpURL>operator:Sop/copytocurves</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/copytocurves</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Utility</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils
sop = soptoolutils.genericTool(kwargs, 'copytocurves')
sop.parm('resettargetattribs').pressButton()]]></script>
  </tool>

  <tool name="geometry_copytocurves" label="Copy to Curves" icon="SOP_copytocurves">
    <helpURL>operator:Sop/copytocurves</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils
sop = soptoolutils.genericTool(kwargs, 'copytocurves')
sop.parm('resettargetattribs').pressButton()]]></script>
  </tool>

  <tool name="geometry_sphere" label="Sphere" icon="SOP_sphere">
    <helpURL>tool:sphere</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils
from soptoolutils import OrientInfo
rad = 0.5
# NB: Bounding box is the same regardless of hou.ui.orientationUpAxis().
kwargs['bbox'] = hou.BoundingBox(-rad, -rad, -rad, rad, rad, rad)
sphere = soptoolutils.genericTool(kwargs, 'sphere', orient=OrientInfo('orient'))
sphere.parm("type").set("polymesh")
sphere.parm("radx").set(rad)
sphere.parm("rady").set(rad)
sphere.parm("radz").set(rad)
]]></script>
  </tool>

  <tool name="geometry_tube" label="Tube" icon="SOP_tube">
    <helpURL>tool:tube</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils
from soptoolutils import OrientInfo
rad = 0.5
height = 1.0
if hou.ui.orientationUpAxis() == hou.orientUpAxis.Z:
    kwargs['bbox'] = hou.BoundingBox(-rad, -rad, -height/2., rad, rad, height/2.)
else:
    kwargs['bbox'] = hou.BoundingBox(-rad, -height/2., -rad, rad, height/2., rad)
tube = soptoolutils.genericTool(kwargs, 'tube', orient=OrientInfo('orient'))
tube.parm("type").set("poly")
tube.parm("radscale").set(rad)
tube.parm("height").set(height)
]]></script>
  </tool>

<tool name="geometry_torus" label="Torus" icon="SOP_torus">
    <helpURL>tool:torus</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils
from soptoolutils import OrientInfo
orad = 0.5
irad = 0.25
if hou.ui.orientationUpAxis() == hou.orientUpAxis.Z:
    kwargs['bbox'] = hou.BoundingBox(-orad - irad, -orad - irad, -irad, orad + irad, orad + irad, irad)
else:
    kwargs['bbox'] = hou.BoundingBox(-orad - irad, -irad, -orad - irad, orad + irad, irad, orad + irad)
torus = soptoolutils.genericTool(kwargs, 'torus', orient=OrientInfo('orient'))
torus.parm("type").set("poly")
torus.parm("radx").set(orad)
torus.parm("rady").set(irad)
]]></script>
  </tool>

<tool name="geometry_grid" label="Grid" icon="SOP_grid">
    <helpURL>tool:grid</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils
from soptoolutils import OrientInfo

size = 4.0
if hou.ui.orientationUpAxis() == hou.orientUpAxis.Z:
    kwargs['bbox'] = hou.BoundingBox(-size/2.0, -size/2.0, 0, size/2.0, size/2.0, 0)
else:
    kwargs['bbox'] = hou.BoundingBox(-size/2.0, 0, -size/2.0, size/2.0, 0, size/2.0)
grid = soptoolutils.genericTool(kwargs, 'grid', orient=OrientInfo('orient'))
grid.parm("sizex").set(size)
grid.parm("sizey").set(size)
]]></script>
  </tool>

<tool name="geometry_terrain" label="HeightField" icon="SOP_heightfield">
    <helpURL>tool:heightfield</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils
from soptoolutils import OrientInfo

size = 10.0
if hou.ui.orientationUpAxis() == hou.orientUpAxis.Z:
    kwargs['bbox'] = hou.BoundingBox(-size/2.0, -size/2.0, 0, size/2.0, size/2.0, 0)
else:
    kwargs['bbox'] = hou.BoundingBox(-size/2.0, 0, -size/2.0, size/2.0, 0, size/2.0)
terrain = soptoolutils.genericTool(kwargs, 'heightfield', orient=OrientInfo('orient'))
]]></script>
  </tool>

<tool name="geometry_platonic" label="Platonic Solids" icon="SOP_platonic">
    <helpURL>tool:platonic</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils
from soptoolutils import OrientInfo

rad = 0.5
# NB: Bounding box is the same regardless of hou.ui.orientationUpAxis().
kwargs['bbox'] = hou.BoundingBox(-rad, -rad, -rad, rad, rad, rad)
platonic = soptoolutils.genericTool(kwargs, 'platonic',  orient=OrientInfo('orient'))
platonic.parm("radius").set(rad)
]]></script>
  </tool>


  <tool name="geometry_line" label="Line" icon="SOP_line">
    <helpURL>tool:line</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils
from soptoolutils import OrientInfo

if hou.ui.orientationUpAxis() == hou.orientUpAxis.Z:
    kwargs['bbox'] = hou.BoundingBox(-1.0, -.0, -1., 1.0, .0, 1.)
else:
    kwargs['bbox'] = hou.BoundingBox(-1.0, -1., -.0, 1.0, 1., .0)
sphere = soptoolutils.genericTool(kwargs, 'line', orient=OrientInfo('dir'))
sphere.parm("type").set("poly")
]]></script>
  </tool>

  <tool name="geometry_circle" label="Circle" icon="SOP_circle">
    <helpURL>tool:circle</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils
from soptoolutils import OrientInfo

if hou.ui.orientationUpAxis() == hou.orientUpAxis.Z:
    kwargs['bbox'] = hou.BoundingBox(-1.0, -.0, -1., 1.0, .0, 1.)
else:
    kwargs['bbox'] = hou.BoundingBox(-1.0, -1., -.0, 1.0, 1., .0)
sphere = soptoolutils.genericTool(kwargs, 'circle', orient=OrientInfo('orient'))
sphere.parm("type").set("poly")
]]></script>
  </tool>

  <tool name="geometry_box" label="Box" icon="SOP_box">
    <helpURL>tool:box</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils

kwargs['bbox'] = hou.BoundingBox(-0.5, -0.5, -0.5, 0.5, 0.5, 0.5)
sphere = soptoolutils.genericTool(kwargs, 'box')
sphere.parm("type").set("polymesh")
sphere.parm("divrate1").set(2)
sphere.parm("divrate2").set(2)
sphere.parm("divrate3").set(2)
]]></script>
  </tool>

  <tool name="geometry_cube" label="Cube" icon="SOP_box">
    <helpURL>tool:box</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils

kwargs['bbox'] = hou.BoundingBox(-0.5, -0.5, -0.5, 0.5, 0.5, 0.5)
sphere = soptoolutils.genericTool(kwargs, 'box')
sphere.parm("type").set("polymesh")
sphere.parm("divrate1").set(2)
sphere.parm("divrate2").set(2)
sphere.parm("divrate3").set(2)
]]></script>
  </tool>

  <tool name="geometry_cube_network" label="Cube" icon="SOP_box">
    <helpURL>tool:box</helpURL>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Primitive</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils

kwargs['bbox'] = hou.BoundingBox(-0.5, -0.5, -0.5, 0.5, 0.5, 0.5)
sphere = soptoolutils.genericTool(kwargs, 'box')
]]></script>
  </tool>

  <tool name="geometry_mirror" label="Mirror" icon="SOP_mirror">
    <helpURL>tool:mirror</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils

scene_viewer = toolutils.sceneViewer();
current_path = scene_viewer.pwd();
if current_path.childTypeCategory() == hou.objNodeTypeCategory():
    toolutils.genericStateTool(kwargs, 'objmirror')
else:
    soptoolutils.genericTool(kwargs, 'mirror')]]></script>
  </tool>

  <tool name="sop_boolean::2.0" label="Boolean" icon="SOP_boolean">
    <helpURL>operator:Sop/boolean</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils
soptoolutils.addBooleanTool(kwargs)
]]></script>
  </tool>

  <tool name="geometry_fogvolume" label="Volume" icon="SOP_volume">
    <helpURL>operator:Sop/isooffset</helpURL>
    <script scriptType="python">
<![CDATA[
import soptoolutils

node = soptoolutils.genericTool(kwargs, 'isooffset', 'converttofog1')
node.parm("output").set('fogvolume')
node.parm("samplediv").set(30)
]]></script>
  </tool>

  <tool name="geometry_voronoifracture" label="Shatter" icon="SOP_shatter">
    <helpURL>tool:shatter</helpURL>
    <script scriptType="python">
<![CDATA[
import soptoolutils

# Create our voronoi fracture

fracture = soptoolutils.genericTool(kwargs, 'voronoifracture::2.0')

fognode = fracture.parent().createNode('isooffset', 'converttofog1')
fognode.parm("output").set('fogvolume')
fognode.parm("samplediv").set(30)

fognode.setNextInput(fracture.inputs()[0])

fognode.moveToGoodPosition()

scatternode = fracture.parent().createNode('scatter', 'chunkcenters')
scatternode.parm("forcetotal").set(True)
scatternode.parm("npts").set(10)
scatternode.parm("relaxpoints").set(False)
scatternode.setNextInput(fognode)
scatternode.moveToGoodPosition()

fracture.setNextInput(scatternode)
fracture.moveToGoodPosition()

]]></script>
  </tool>

  <tool name="geometry_grainupres" label="Upres Sand" icon="SHELF_sand_upres">
  <helpURL>tool:upressand</helpURL>
  <script scriptType="python"><![CDATA[
import toolutils
import soptoolutils
import doppyrotoolutils

activepane = toolutils.activePane(kwargs)

if not isinstance(activepane, hou.SceneViewer):
    raise hou.Error("Invalid pane type for this operation.")

# Correct pane type, grab our geo.
selectedobjects = activepane.selectObjects(
    prompt = toolutils.selectionPrompt(hou.objNodeTypeCategory()),
    allow_multisel = True,
    allowed_types = ("geo",))

if len(selectedobjects) < 1:
    raise hou.Error("No objects were selected.")

objnode = selectedobjects[0]
sopnode = objnode.displayNode()

if sopnode is None:
    raise hou.Error("No geometry inside selection.")

if sopnode.type().category() != hou.sopNodeTypeCategory():
    raise hou.Error("Displayed node is wrong type in selection.")

nextnode = sopnode

orientnode = objnode.createNode('attribwrangle', 'createorient');
orientnode.setNextInput(nextnode)
orientnode.moveToGoodPosition()
nextnode = orientnode
orientnode.parm('snippet').set('vector4 @orient = { 0, 0, 0, 1 };')

repnode = objnode.createNode('pointreplicate', 'duplicatepoints')
repnode.setNextInput(nextnode)
repnode.moveToGoodPosition()
nextnode = repnode
repnode.parm('nptsperpt').set(10)
repnode.parm('shape').set('sphere')
repnode.parm('scale').set(2.5)
repnode.parm('docopyattribs').set(True)
repnode.parm('attribstocopy').set('v pscale sprite* Cd')

landinnode = repnode

seednode = objnode.createNode('attribwrangle', 'setseed_adjust_pscale')
seednode.setNextInput(nextnode)
seednode.moveToGoodPosition()
nextnode = seednode

seednode.addSpareParmTuple(hou.IntParmTemplate('nptsperpt', 'Points per Point', 1, default_value=(10, ), min=0, max=1))
seednode.addSpareParmTuple(hou.FloatParmTemplate('packingdensity', 'Packing Density', 1, default_value=(1.0, ), min=0, max=2))
seednode.parm('nptsperpt').set(repnode.parm('nptsperpt'))
seednode.parm('snippet').set(
"""float @pscale = 1;

@seed = rand(@ptnum);
@pscale *= (1/cbrt(ch('nptsperpt')));
@pscale *= ch('packingdensity');
""")

colornode = objnode.createNode('color', 'color')
colornode.setNextInput(nextnode)
colornode.moveToGoodPosition()
nextnode = colornode
colornode.parm('colortype').set(3)
colornode.parm('rampattribute').set('seed')
doppyrotoolutils.buildColorRamp(colornode, 'ramp', 'catmull-rom',
	    [
	    (0, (0.4, 0.32, 0.20)),
	    (0.9, (0.72, 0.706, 0.405)),
	    (1, (1, 1, 1))
	    ])

landinnode.setCurrent(True,True)
activepane.enterCurrentNodeState()

nextnode.setDisplayFlag(True)
nextnode.setRenderFlag(True)
]]></script>
  </tool>

  <tool name="geometry_squashstretch" label="Squash and Stretch" icon="SHELF_twist_squashstretch">
    <helpURL>tool:squashstretch</helpURL>
    <script scriptType="python"><![CDATA[import soptoolutils
node = soptoolutils.createBendSop(kwargs, "squashstretch1")
node.parm("enablelengthscale").set(1)
node.parm("enablebend").set(0)
]]></script>
  </tool>

  <tool name="geometry_lineartaper" label="Linear Taper" icon="SHELF_twist_linear_taper">
    <helpURL>tool:lineartaper</helpURL>
    <toolMenuContext name="viewer">
      <contextOpType>Sop/bend</contextOpType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/bend</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils
node = soptoolutils.createBendSop(kwargs, "lineartaper1")
node.parm("enabletaper").set(1)
node.parm("enablebend").set(0)
]]></script>
  </tool>

  <tool name="sop_bend" label="Bend" icon="SHELF_twist_bend">
    <helpURL>tool:bend</helpURL>
    <toolMenuContext name="viewer">
      <contextOpType>Sop/bend</contextOpType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/bend</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils
soptoolutils.createBendSop(kwargs, "bend1")
]]></script>
  </tool>

  <tool name="geometry_twist" label="Twist" icon="SHELF_twist_twist">
    <helpURL>tool:twist</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/bend</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils
node = soptoolutils.createBendSop(kwargs, "twist1")
node.parm("enabletwist").set(1)
node.parm("enablebend").set(0)
]]></script>
  </tool>

  <tool name="geometry_loft" label="Loft" icon="SOP_loft">
    <helpURL>tool:loft</helpURL>
    <script scriptType="python"><![CDATA[import soptoolutils

u_selector_only = [0]
node = soptoolutils.genericSopNodeFilterTool(kwargs, 'skin', 'loft1', False, False, True, u_selector_only)]]></script>
  </tool>

  <tool name="geometry_polycap" label="PolyCap" icon="SOP_polyfill">
    <helpURL>operator:Sop/polyfill</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/polyfill</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils

node = soptoolutils.genericTool(kwargs, 'polyfill')
node.parm('fillmode').set('none')
]]></script>
  </tool>

  <tool name="geometry_extractallpoints" label="Extract All Points" icon="SOP_add">
    <helpURL>operator:Sop/add</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/add</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils

node = soptoolutils.genericTool(kwargs, 'add')
node.setName('extractallpoints1', True)
node.parm('keep').set(True)
]]></script>
  </tool>


  <tool name="geometry_pyroconfigurebillowysmoke" label="Pyro Configure Billowy Smoke" icon="SHELF_spyro_billowysmoke">
    <helpURL>operator:Sop/pyrosolver</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/pyrosolver</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Pyro</toolSubmenu>
    <script scriptType="python"><![CDATA[
import dopsparsepyrotools

node = dopsparsepyrotools.sopBillowySmoke(kwargs)
]]></script>
  </tool>

  <tool name="geometry_pyroconfigurefireball" label="Pyro Configure Fireball" icon="SHELF_spyro_fireball">
    <helpURL>operator:Sop/pyrosolver</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/pyrosolver</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Pyro</toolSubmenu>
    <script scriptType="python"><![CDATA[
import dopsparsepyrotools

node = dopsparsepyrotools.sopFireball(kwargs)
]]></script>
  </tool>

  <tool name="geometry_pyroconfigurefirespread" label="Pyro Configure Spreading Fire" icon="SHELF_spyro_firespread">
    <helpURL>operator:Sop/pyrosolver</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/pyrosolver</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Pyro</toolSubmenu>
    <script scriptType="python"><![CDATA[
import dopsparsepyrotools

node = dopsparsepyrotools.sopSpreadingFire(kwargs)
]]></script>
  </tool>

  <tool name="geometry_pyrosimplefirespread" label="Simple Spreading Fire" icon="SHELF_spyro_firespread">
    <helpURL>tool:pyrosimplefirespread</helpURL>
    <script scriptType="python"><![CDATA[
import dopsparsepyrotools

node = dopsparsepyrotools.createSopSpreadingFire(kwargs)
]]></script>
  </tool>

  <tool name="geometry_pyrosimplefireball" label="Simple Fireball" icon="SHELF_fireball">
    <helpURL>tool:pyrosimplefireball</helpURL>
    <script scriptType="python"><![CDATA[
import dopsparsepyrotools

node = dopsparsepyrotools.createSopFireball(kwargs)
]]></script>
  </tool>

  <tool name="geometry_pyrosimplebillowysmoke" label="Simple Billowy Smoke" icon="SHELF_smoke_heavy">
    <helpURL>tool:pyrosimplebillowysmoke</helpURL>
    <script scriptType="python"><![CDATA[
import dopsparsepyrotools

node = dopsparsepyrotools.createSopBillowySmoke(kwargs)
]]></script>
  </tool>

  <tool name="geometry_vellumsimplecloth" label="Simple Cloth" icon="SHELF_vellum_simplecloth">
    <helpURL>tool:vellumsimplecloth</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import doppoptoolutils

node = doppoptoolutils.createSopVellum(kwargs, 'cloth')
]]></script>
  </tool>


  <tool name="geometry_vellumsimplesoftbody" label="Simple Softbody" icon="SHELF_vellum_softbody">
    <helpURL>tool:vellumsimplesoftbody</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import doppoptoolutils

node = doppoptoolutils.createSopVellum(kwargs, 'softbody')
]]></script>
  </tool>

    <tool name="geometry_rbdsimplefracture" label="Simple Fracture" icon="SOP_rbdmaterialfracture">
    <helpURL>tool:rbdsimplefracture</helpURL>
    <script scriptType="python"><![CDATA[
import doprbdtoolutils

node = doprbdtoolutils.createSopRBD(kwargs, 'fracture')
]]></script>
  </tool>

  <tool name="geometry_rbdsimpleguided" label="Simple Guided RBDs" icon="SHELF_rbd_guided">
    <helpURL>tool:rbdsimpleguided</helpURL>
    <script scriptType="python"><![CDATA[
import doprbdtoolutils

node = doprbdtoolutils.createSopRBD(kwargs, 'guided sim')
]]></script>
  </tool>

  <tool name="geometry_vellumconfigurecloth" label="Vellum Configure Cloth" icon="SHELF_vellum_cloth">
    <helpURL>operator:Sop/vellumconstraints</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/vellumconstraints</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Vellum</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils, math

node = soptoolutils.genericTool(kwargs, 'vellumconstraints')
scale = hou.scaleFromMKS('kg1m-2')
node.setName('vellumcloth1', True)
node.parm('constrainttype').set('cloth')
node.parm('domass').set('calcvarying')
node.parm('density').set(0.1 * scale)
node.parm('dothickness').set('calcuniform')
node.parm('docompress').set(True)
node.parm('bendstiffness').set(1)
# Bend Stiffness varies as inverse of density
bendexp = int(round(-4 - math.log10(scale)))
node.parm('bendstiffnessexp').set(bendexp)
node.parm('dostretchgrp').set(True)
node.parm('dobendgrp').set(True)
]]></script>
  </tool>

  <tool name="geometry_vellumconfigurehair" label="Vellum Configure Hair" icon="SHELF_vellum_hair">
    <helpURL>operator:Sop/vellumconstraints</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/vellumconstraints</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Vellum</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils, math

node = soptoolutils.genericTool(kwargs, 'vellumconstraints')
scale = hou.scaleFromMKS('kg1m-1')
node.setName('vellumhair1', True)
node.parm('constrainttype').set('hair')
node.parm('domass').set('calcvarying')
node.parm('density').set(0.001 * scale)
node.parm('dothickness').set('calcuniform')
node.parm('dostretchgrp').set(True)
node.parm('dobendgrp').set(True)
node.parm('stretchdampingratio').set(0.01)
node.parm('bendstiffness').set(1)
# Bend Stiffness varies as inverse of density
bendexp = int(round(-3 - math.log10(scale)))
node.parm('bendstiffnessexp').set(bendexp)
node.parm('benddampingratio').set(0.05)
]]></script>
  </tool>

  <tool name="geometry_vellumconfigureballoon" label="Vellum Configure Balloon" icon="SHELF_vellum_balloon">
    <helpURL>operator:Sop/vellumconstraints</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/vellumconstraints</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Vellum</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils

node = soptoolutils.genericTool(kwargs, 'vellumconstraints')
node.setName('vellumcloth1', True)
node.parm('constrainttype').set('cloth')
node.parm('domass').set(True)
node.parm('dothickness').set('calcuniform')
node.parm('stretchstiffness').set(6)
node.parm('stretchstiffnessexp').set(2)
node.parm('dostretchgrp').set(True)
node.parm('dobendgrp').set(True)

volconstraint = node.parent().createNode('vellumconstraints')
volconstraint.setName('vellumpressure1', True)
volconstraint.setInput(0, node, 0)
volconstraint.setInput(1, node, 1)
volconstraint.setInput(2, node, 2)
volconstraint.moveToGoodPosition()

volconstraint.parm('constrainttype').set('pressure')
volconstraint.parm('stretchstiffness').set(6)
volconstraint.parm('stretchstiffnessexp').set(2)

if node.isDisplayFlagSet():
    volconstraint.setDisplayFlag(True)
if node.isRenderFlagSet():
    volconstraint.setRenderFlag(True)
volconstraint.setCurrent(True, True)

]]></script>
  </tool>

  <tool name="geometry_vellumconfiguresoftbody" label="Vellum Configure Strut Softbody" icon="SHELF_vellum_softbody">
    <helpURL>operator:Sop/vellumconstraints</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/vellumconstraints</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Vellum</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils

node = soptoolutils.genericTool(kwargs, 'vellumconstraints')
node.setName('vellumcloth1', True)
node.parm('constrainttype').set('cloth')
node.parm('domass').set(True)
node.parm('dothickness').set('calcuniform')
node.parm('dostretchgrp').set(True)
node.parm('dobendgrp').set(True)

volconstraint = node.parent().createNode('vellumconstraints')
volconstraint.setName('vellumstruts1', True)
volconstraint.setInput(0, node, 0)
volconstraint.setInput(1, node, 1)
volconstraint.setInput(2, node, 2)
volconstraint.moveToGoodPosition()

volconstraint.parm('constrainttype').set('struts')
volconstraint.parm('stretchstiffness').set(1)
volconstraint.parm('stretchstiffnessexp').set(1)
volconstraint.parm('compressstiffness').set(1)
volconstraint.parm('compressstiffnessexp').set(1)
volconstraint.parm('stretchdampingratio').set(0.01)

if node.isDisplayFlagSet():
    volconstraint.setDisplayFlag(True)
if node.isRenderFlagSet():
    volconstraint.setRenderFlag(True)
volconstraint.setCurrent(True, True)

]]></script>
  </tool>

 <tool name="geometry_vellumconfiguretetsoftbody" label="Vellum Configure Tetrahedral Softbody" icon="SHELF_vellum_tetsoftbody">
    <helpURL>operator:Sop/vellumconstraints</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/vellumconstraints</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Vellum</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils

conform = soptoolutils.genericTool(kwargs, 'solidconform')

constraint = conform.parent().createNode('vellumconstraints', 'vellumtetrahedral')
constraint.setNextInput(conform)
constraint.moveToGoodPosition()
constraint.parm('constrainttype').set('tetstretch')
scale = hou.scaleFromMKS('kg1m-3')
constraint.parm('domass').set('calcvarying')
constraint.parm('density').set(100 * scale)
constraint.parm('dothickness').set('calcuniform')
constraint.parm('dostretchgrp').set(True)
constraint.parm('dobendgrp').set(True)
constraint.parm('stretchstiffness').set(1)
constraint.parm('stretchstiffnessexp').set(-2)
constraint.parm('stretchdampingratio').set(0.01)
constraint.parm('preservevol').set(True)

if conform.isDisplayFlagSet():
    constraint.setDisplayFlag(True)
if conform.isRenderFlagSet():
    constraint.setRenderFlag(True)
constraint.setCurrent(True, True)

]]></script>
  </tool>

  <tool name="geometry_vellumstitchconstraints" label="Vellum Stitch Points" icon="SOP_vellumstitchconstraints">
    <helpURL>operator:Sop/vellumconstraints</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/vellumconstraints</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Vellum</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils

node = soptoolutils.genericTool(kwargs, 'vellumconstraints')
node.setName('vellumstitch1', True)
node.parm('constrainttype').set('stitch')
node.parm('useclosestprim').set(False)
]]></script>
  </tool>

  <tool name="geometry_vellumattachconstraints" label="Vellum Attach to Geometry" icon="SOP_vellumattachconstraints">
    <helpURL>operator:Sop/vellumconstraints</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/vellumconstraints</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Vellum</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils

node = soptoolutils.genericTool(kwargs, 'vellumconstraints')
node.setName('vellumattach1', True)
node.parm('constrainttype').set('attach')
]]></script>
  </tool>

  <tool name="geometry_vellumweldconstraints" label="Vellum Weld Points" icon="SOP_vellumweldconstraints">
    <helpURL>operator:Sop/vellumconstraints</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/vellumconstraints</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Vellum</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils

node = soptoolutils.genericTool(kwargs, 'vellumconstraints')
node.setName('vellumweld1', True)
node.parm('constrainttype').set('weld')
]]></script>
  </tool>

  <tool name="geometry_vellumglueconstraints" label="Vellum Glue" icon="SOP_vellumglueconstraints">
    <helpURL>operator:Sop/vellumconstraints</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/vellumconstraints</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Vellum</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils

node = soptoolutils.genericTool(kwargs, 'vellumconstraints')
node.setName('vellumglue1', True)
node.parm('constrainttype').set('glue')
node.parm('docompress').set(True)
node.parm('compressstiffness').set(1)
node.parm('stretchstiffness').set(1)
node.parm('stretchstiffnessexp').set(1)
node.parm('stretchdampingratio').set(0.01)
]]></script>
  </tool>

  <tool name="geometry_vellumstrutsconstraints" label="Vellum Struts" icon="SOP_vellumstrutsconstraints">
    <helpURL>operator:Sop/vellumconstraints</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/vellumconstraints</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Vellum</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils

node = soptoolutils.genericTool(kwargs, 'vellumconstraints')
node.setName('vellumstruts1', True)
node.parm('constrainttype').set('struts')
node.parm('stretchstiffness').set(1)
node.parm('stretchstiffnessexp').set(1)
node.parm('compressstiffness').set(1)
node.parm('compressstiffnessexp').set(1)
node.parm('stretchdampingratio').set(0.01)
]]></script>
  </tool>

  <tool name="object_parentblend" label="Parent Blend" icon="OBJ_blend">
    <helpURL>operator:Object/blend</helpURL>
    <script scriptType="python"><![CDATA[import toolutils

toolutils.genericStateTool(kwargs, 'blend')]]></script>
  </tool>

  <tool name="sop_metaball" label="Metaball" icon="SOP_metaball">
    <helpURL>operator:Sop/metaball</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/metaball</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Primitive</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

kwargs['bbox'] = hou.BoundingBox(-0.5, -0.5, -0.5, 0.5, 0.5, 0.5)
soptoolutils.genericTool(kwargs, 'metaball', merge_context=True)]]></script>
  </tool>

  <tool name="sop_knife" label="Knife" icon="SHELF_knife">
    <helpURL>operator:Sop/knife</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/knife</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils
from soptoolutils import OrientInfo

knife_sop = soptoolutils.genericTool(kwargs, 'knife', 'knife1', custom = False,
                                     orient = OrientInfo('dir'))
knife_sop.parm("knifeop").set("both")
knife_sop.setCreatorState('knife')
activepane = toolutils.activePane(kwargs)
if isinstance(activepane, hou.SceneViewer):
    sceneviewer = toolutils.sceneViewer()
    sceneviewer.setCurrentState("knife")
]]></script>
  </tool>

  <tool name="sop_clip" label="Clip" icon="SOP_clip">
    <helpURL>operator:Sop/clip</helpURL>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils
from soptoolutils import OrientInfo

clip_sop = soptoolutils.genericTool(kwargs, 'clip', orient = OrientInfo('dir'))
activepane = toolutils.activePane(kwargs)
if isinstance(activepane, hou.SceneViewer) and \
	clip_sop is not None and len(clip_sop.inputs()) > 0:
    input = clip_sop.inputs()[0]
    input_center = input.geometry().boundingBox().center()
    clip_sop.parmTuple('origin').set(input_center)]]></script>
  </tool>

  <tool name="sop_connectivity" label="Connectivity" icon="SOP_connectivity">
    <helpURL>operator:Sop/connectivity</helpURL>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Attribute</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

activepane = toolutils.activePane(kwargs)
old_group_list_visible = True
old_group_list_mask = "*"
if isinstance(activepane, hou.SceneViewer):
    old_group_list_visible = activepane.isGroupListVisible()
    old_group_list_mask = activepane.groupListMask()
    activepane.setGroupListMask("+cut")
    activepane.setGroupListVisible(True)
newsop = soptoolutils.genericTool(kwargs, "connectivity")
if isinstance(activepane, hou.SceneViewer):
    if newsop is not None:
	newsop.parm('connecttype').set('prim')
    activepane.setGroupListVisible(old_group_list_visible)
    activepane.setGroupListMask(old_group_list_mask)
]]></script>
  </tool>

  <tool name="object_centerpivot" label="Move Pivot to Center" icon="SHELF_center_pivot">
    <helpURL>tool:centerpivot</helpURL>
    <script scriptType="python"><![CDATA[import toolutils

scene_viewer = None
activepane = toolutils.activePane(kwargs)
parent = activepane.pwd()
if activepane.type() != hou.paneTabType.SceneViewer:
    # Use the last selected object
    if parent.childTypeCategory() != hou.objNodeTypeCategory():
        raise hou.Error("This tool cannot be executed in this context")
    selected = [child for child in parent.children() if child.isSelected()]
else:
    scene_viewer = toolutils.sceneViewer()
    selected = scene_viewer.selectObjects(
                prompt = toolutils.selectionPrompt(hou.objNodeTypeCategory()),
                allow_multisel = True,
                allowed_types = ("geo",))

if len(selected) == 0:
    raise hou.Error("Nothing was selected")

for center_obj in selected:
    display = center_obj.displayNode()
    if display is None:
        pivot = hou.Vector3(0, 0, 0)        # Use 0,0,0 by convention
    else:
        geo = display.geometry()
        pivot = geo.boundingBox().center()
    center_obj.parmTuple("p").set(pivot)

if scene_viewer is not None:
    scene_viewer.setCurrentState("pose")]]></script>
  </tool>

  <tool name="object_movetopivot" label="Move Center to Pivot" icon="SHELF_move_center_to_pivot">
    <helpURL>tool:movetopivot</helpURL>
    <script scriptType="python"><![CDATA[import toolutils

scene_viewer = None
activepane = toolutils.activePane(kwargs)
parent = activepane.pwd()
if activepane.type() != hou.paneTabType.SceneViewer:
    # Use the last selected object
    if parent.childTypeCategory() != hou.objNodeTypeCategory():
        raise hou.Error("This tool cannot be executed in this context")
    selected = [child for child in parent.children() if child.isSelected()]
else:
    scene_viewer = toolutils.sceneViewer()
    selected = scene_viewer.selectObjects(
                prompt = toolutils.selectionPrompt(hou.objNodeTypeCategory()),
                allow_multisel = True,
                allowed_types = ("geo",))

if len(selected) == 0:
    raise hou.Error("Nothing was selected")

for center_obj in selected:
    display = center_obj.displayNode()
    if display:
        geo = display.geometry()
        pivot = geo.boundingBox().center()
	sop = center_obj.createNode('xform', 'move_to_pivot1')
	sop.setInput(0, display)
	sop.moveToGoodPosition()
	sop.setDisplayFlag(True)
	if display.isRenderFlagSet():
	    sop.setRenderFlag(True)
	sop.parmTuple("t").set(-pivot)
	sop.parmTuple("p").set( pivot)

if scene_viewer is not None:
    scene_viewer.setCurrentState("pose")]]></script>
  </tool>

  <tool name="geometry_extract" label="Extract" icon="SHELF_extract_object">
    <helpURL>tool:extract</helpURL>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils

activepane = toolutils.activePane(kwargs)
if activepane.type() != hou.paneTabType.SceneViewer:
    raise hou.Error("This tool cannot run in the current pane")

scene_viewer = toolutils.sceneViewer()
nodetypename = "delete"

# Obtain a geometry selection
geo_types = (hou.geometryType.Primitives, )
selection = scene_viewer.selectGeometry(
                "Select the primitives to extract and press Enter to complete",
                geometry_types = geo_types,
                allow_obj_sel = True)
# The following will raise an exception if nothing was selected.
if len(selection.nodes()) == 0:
    raise hou.Error("Nothing was selected.")

# Create a new SOP container with the merged geometry
container = soptoolutils.createSopNodeContainer(scene_viewer, "extract_object1")
merge_sop = selection.mergedNode(container, nodetypename, True, True)
# Turn back on the display flag for merged nodes
for sop in selection.nodes():
    sop.parent().setDisplayFlag(True)

# Change our viewer to the new object
scene_viewer.setPwd(merge_sop.parent())
merge_sop.setDisplayFlag(True)
merge_sop.setRenderFlag(True)
merge_sop.setHighlightFlag(True)
merge_sop.setCurrent(True, True)
merge_sop.moveToGoodPosition()
toolutils.homeToSelectionNetworkEditorsFor(merge_sop)
scene_viewer.enterCurrentNodeState()]]></script>
  </tool>

  <tool name="sop_maskalonggeometry" label="Mask Along Geometry" icon="SOP_distancealonggeometry">
    <helpURL>operator:SOP/distancealonggeometry</helpURL>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Mask</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils
newnode = soptoolutils.genericTool(kwargs, "distancealonggeometry", "maskalonggeometry1")
newnode.parm("enableoutattrib").set(0)
newnode.parm("enableoutmask").set(1)]]></script>
  </tool>

  <tool name="sop_maskfromgeometry" label="Mask from Geometry" icon="SOP_distancefromgeometry">
    <helpURL>operator:SOP/distancefromgeometry</helpURL>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Mask</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils
newnode = soptoolutils.genericTool(kwargs, "distancefromgeometry", "maskfromgeometry1")
newnode.parm("enableoutattrib").set(0)
newnode.parm("enableoutmask").set(1)]]></script>
  </tool>

  <tool name="sop_maskfromtarget" label="Mask from Target" icon="SOP_distancefromtarget">
    <helpURL>operator:SOP/distancefromtarget</helpURL>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Mask</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils
newnode = soptoolutils.genericTool(kwargs, "distancefromtarget", "maskfromtarget1")
newnode.parm("enableoutattrib").set(0)
newnode.parm("enableoutmask").set(1)]]></script>
  </tool>

  <tool name="geo_group" label="Group" icon="SOP_group">
    <helpURL>operator:Sop/groupcreate</helpURL>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Group</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils
soptoolutils.genericTool(kwargs, 'groupcreate')]]></script>
  </tool>

  <tool name="sop_groupexpand" label="Group Expand" icon="SOP_groupexpand">
    <helpURL>operator:Sop/groupexpand</helpURL>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Group</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils

activepane = toolutils.activePane(kwargs)
if activepane.type() == hou.paneTabType.SceneViewer:
    # Obtain a geometry selection
    geo_types = (hou.geometryType.Primitives, 
		 hou.geometryType.Points, 
		 hou.geometryType.Edges,
		 hou.geometryType.Vertices)
    selection = activepane.selectGeometry(
		    "Select the components to expand, and press Enter to complete",
		    geometry_types = geo_types,
		    allow_obj_sel = True)

    if len(selection.nodes()) == 0:
	raise hou.Error("Nothing was selected.")
    
    parentnode = activepane.pwd()
    merge_sop = selection.mergedNode(parentnode, "groupexpand")

    if selection.needsMergedNode(parentnode):
	merge_sop.moveToGoodPosition()
	node = parentnode.createNode('groupexpand')
	node.setInput(0, merge_sop)
    else:
	node = soptoolutils.genericTool(kwargs, 'groupexpand')

    node.moveToGoodPosition();
    node.parm('group').set(selection.mergedSelectionString())
    
    geotype = selection.geometryType()
    if geotype == hou.geometryType.Points:
	geotypestr = 'points'
    elif geotype == hou.geometryType.Vertices:
	geotypestr = 'vertices'
    elif geotype == hou.geometryType.Edges:
	geotypestr = 'edges'
    else: 
	geotypestr = 'prims'

    node.parm('grouptype').set(geotypestr)

    node.setDisplayFlag(True)
    node.setRenderFlag(selection.nodes()[0].isRenderFlagSet())
    node.setCurrent(True, True)
    activepane.enterCurrentNodeState()
else:
    soptoolutils.genericTool(kwargs, 'groupexpand')]]></script>
  </tool>

  <tool name="sop_groupfindpath" label="Group Find Path" icon="SOP_groupfindpath">
    <helpURL>operator:Sop/groupfindpath</helpURL>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Group</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils

activepane = toolutils.activePane(kwargs)
if activepane.type() == hou.paneTabType.SceneViewer:
    # Obtain a geometry selection
    geo_types = (hou.geometryType.Primitives,
		 hou.geometryType.Points,
		 hou.geometryType.Edges,
		 hou.geometryType.Vertices)
    selection = activepane.selectGeometry(
		    "Select the control components, and press Enter to complete",
		    ordered = True,
		    geometry_types = geo_types,
		    allow_obj_sel = True)

    if len(selection.nodes()) == 0:
	raise hou.Error("Nothing was selected.")

    node = soptoolutils.genericTool(kwargs, 'groupfindpath')
    node.moveToGoodPosition()

    node.parm('group').set(selection.mergedSelectionString())
    node.parm('pathcontroltype').set('controls')

    geotype = selection.geometryType()
    if geotype == hou.geometryType.Points:
	geotypestr = 'points'
    elif geotype == hou.geometryType.Vertices:
	geotypestr = 'vertices'
    elif geotype == hou.geometryType.Edges:
	geotypestr = 'edges'
    else: 
	geotypestr = 'prims'

    node.parm('grouptype').set(geotypestr)

    node.setDisplayFlag(True)
    node.setRenderFlag(selection.nodes()[0].isRenderFlagSet())
    node.setCurrent(True, True)
    activepane.enterCurrentNodeState()
else:
    soptoolutils.genericTool(kwargs, 'groupfindpath')]]></script>
  </tool>

  <tool name="object_combine" label="Combine" icon="SHELF_combine_objects">
    <helpURL>tool:combine</helpURL>
    <script scriptType="python"><![CDATA[import toolutils

scene_viewer = toolutils.sceneViewer()

# Ask for the objects to combine
selected_objects = list(scene_viewer.selectObjects(
    prompt = toolutils.selectionPrompt(hou.objNodeTypeCategory()),
    allow_multisel = True,
    allowed_types = ("geo",)))
# The following will raise an exception if nothing was selected.
if len(selected_objects) == 0:
    raise hou.Error("Nothing was selected.")

# Combine into the last picked item
current_objects = [obj for obj in selected_objects if obj.isCurrent()]
if len(current_objects) == 0:
    container = selected_objects[-1]
else:
    container = current_objects[-1]

selected_objects.remove(container)
container.combine(selected_objects)
toolutils.homeToSelectionNetworkEditorsFor(container)
]]></script>
  </tool>

  <tool name="sop_curve" label="Curve" icon="SOP_curve">
    <helpURL>operator:Sop/curve</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Primitive</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils

activepane = toolutils.activePane(kwargs)
if activepane.type() == hou.paneTabType.SceneViewer:
    # Get the current context.
    sceneviewer = toolutils.sceneViewer()
    # Create a SOP container.
    container = soptoolutils.createSopNodeContainer(sceneviewer, "curve_object1")
    # Create the curve.
    newnode = soptoolutils.createSopNodeGenerator(container, "curve", None)
    # Turn on the highlight flag so we see the SOPs selected output.
    newnode.setHighlightFlag(True)
    if sceneviewer.isCreateInContext() or \
      (container.parent().parent() and container.parent().parent().type() == hou.nodeType(hou.lopNodeTypeCategory(), "sopcreate")):
        newnode.setCurrent(True, True)
        sceneviewer.enterCurrentNodeState()
        toolutils.homeToSelectionNetworkEditorsFor(newnode)
    else:
        container.setCurrent(True, True)
        toolutils.homeToSelectionNetworkEditorsFor(container)
        activepane.setPwd(container.parent())
        activepane.setCurrentState("objcurve")
elif activepane.type() == hou.paneTabType.NetworkEditor:
    soptoolutils.genericTool(kwargs, "curve")
else:
    raise hou.Error("Can't run the tool in the selected pane.")]]></script>
  </tool>

  <tool name="sop_smooth::2.0" label="Smooth" icon="SOP_smooth">
    <helpURL>operator:Sop/smooth</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils
selection_queries = [
  {
    'parm_name' : 'group',
    'is_required' : True,
    'prompt' : 'Select the primitives to smooth and press Enter to continue.',
    'geometry_types' : (hou.geometryType.Primitives, )
  },
  {
    'parm_name' : 'constrainedpoints',
    'is_required' : False,
    'prompt' : 'Now select the points to constrain, if any, and press Enter to complete.',
    'geometry_types' : (hou.geometryType.Points, hou.geometryType.Edges),
    'use_existing_selection' : False,
    'allow_obj_sel' : False
  },
]
soptoolutils.createCustomSelectionSopNodeFilterTool(kwargs, 'smooth::2.0',
  'smooth1', selection_queries)]]></script>
  </tool>

  <tool name="sop_uvsmooth" label="UV Smooth" icon="SOP_smooth">
    <helpURL>operator:Sop/smooth</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Material</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils
selection_queries = [
  {
    'parm_name' : 'group',
    'is_required' : True,
    'prompt' : 'Select the UV primitives to smooth and press Enter to continue.',
    'geometry_types' : (hou.geometryType.Primitives, )
  },
  {
    'parm_name' : 'constrainedpoints',
    'is_required' : False,
    'prompt' : 'Now select the points to constrain, if any, and press Enter to complete.',
    'geometry_types' : (hou.geometryType.Points, ),
    'use_existing_selection' : False,
    'allow_obj_sel' : False
  },
]
sopnodes = soptoolutils.createCustomSelectionSopNodeFilterTool(kwargs, 'smooth::2.0',
  'uvsmooth1', selection_queries)
for node in sopnodes:
  node.parm('attributes').set(soptoolutils.findViewersUV(kwargs))]]></script>
  </tool>

  <tool name="sop_topobuild" label="TopoBuild" icon="SOP_topobuild">
    <helpURL>operator:Sop/topobuild</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils

activepane = toolutils.activePane(kwargs)
if activepane.type() == hou.paneTabType.SceneViewer:
    sopnode, template = None, None
    node = activepane.currentNode()
    if node and node.type().category() == hou.sopNodeTypeCategory():
        # continue work in the current SOP network
        sopnode = node
        topobuild = toolutils.findInputNodeOfType(sopnode, 'topobuild', True)
        if topobuild:
            inputs = topobuild.inputs()
            if len(inputs) > 1:
                # re-use the template geometry
                template = inputs[1]

    templateobj = None
    if template is None:
        # select template geometry
        for obj in activepane.selectObjects(
                    prompt = 'Select projection geometry to retopologize and press Enter to continue.',
                    allowed_types = ('geo', ),
                    allow_multisel = False):
            templateobj = obj
            activepane.currentNode().setCurrent(False, True)

    extendobj = None
    # Only prompt the user if they alraedy selected a valid node.
    if templateobj and sopnode is None:
        # select topology to extend
        for obj in activepane.selectObjects(
                prompt = 'Now select topology to extend, if any, and press Enter to complete.',
                allowed_types = ('geo', ),
                allow_multisel = False):
            extendobj = obj
            sopnode = extendobj.displayNode()

    if templateobj and template is None:
        if templateobj != extendobj:
            # create a new container if the selected object is an ancestor of sopnode
            node = sopnode
            while node:
                if node == templateobj:
                    sopnode = None
                    break
                node = node.parent()
        else:
            sopnode = None
        if sopnode:
            container = sopnode.parent()
        else:
            # create container for retopo work
            container = templateobj.parent().createNode('geo', templateobj.name() + '_retopo')
            toolutils.removeDefaultGeometryObjectContents(container)
            container.moveToGoodPosition()

        # object merge template geometry
        template = container.createNode('object_merge')
        template.parm('objpath1').set(template.relativePathTo(templateobj))
        template.parm('xformpath').set('.')
        template.moveToGoodPosition()

    if template:
        template.setTemplateFlag(True)
        if sopnode is None or not (sopnode.type().name() == 'topobuild' and len(sopnode.inputs()) > 1):
            # create new topobuild node
            topobuild = template.parent().createNode('topobuild')
            topobuild.setInput(0, sopnode)
            topobuild.setInput(1, template)
            topobuild.moveToGoodPosition()
            topobuild.setDisplayFlag(True)
            topobuild.setRenderFlag(sopnode is None or sopnode.isRenderFlagSet())

            # add visualizer
            vis = hou.viewportVisualizers.createVisualizer(hou.viewportVisualizers.type('vis_color'), hou.viewportVisualizerCategory.Node, topobuild)
            vis.setParm('colortype', 'constant')
            vis.setParm('class', 'detail')
            vis.setParm('constcolorr', 0.0)
            vis.setParm('constcolorg', 0.9)
            vis.setParm('constcolorb', 0.21)
            vis.setIsActive(True)
            sopnode = topobuild
        sopnode.setCurrent(True, True)
        activepane.enterCurrentNodeState()
elif activepane.type() == hou.paneTabType.NetworkEditor:
    soptoolutils.genericTool(kwargs, 'topobuild')
else:
    raise hou.Error("Can't run the tool in the selected pane.")]]></script>
  </tool>

  <tool name="sop_polydraw" label="PolyDraw" icon="SOP_polydraw">
    <helpURL>operator:Sop/topobuild</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils

sop = None
activepane = toolutils.activePane(kwargs)
if isinstance(activepane, hou.SceneViewer):
    parent = activepane.pwd()
    child_type = parent.childTypeCategory()
    if child_type == hou.objNodeTypeCategory():
	# create new object
	obj = parent.createNode('geo', 'polydraw_object1')
        obj.moveToGoodPosition()
	sop = obj.createNode('topobuild', 'polydraw1')
        sop.setCurrent(True, True)
    else:
        node = activepane.currentNode()
        if node and node.type().category() == hou.sopNodeTypeCategory() and node.type().name() == 'topobuild':
            sop = node
if sop:
    activepane.enterCurrentNodeState()
else:
    soptoolutils.genericTool(kwargs, 'topobuild', 'polydraw1')]]></script>
  </tool>

  <tool name="sop_deltamush" label="Delta Mush" icon="SOP_deltamush">
    <helpURL>operator:Sop/deltamush</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/deltamush</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils

deltamush = soptoolutils.genericTool(kwargs, 'deltamush')
if isinstance(toolutils.activePane(kwargs), hou.SceneViewer):
    deform = soptoolutils.findDeformTypeInputSop(deltamush)
    if deform is not None and len(deform.inputs()) > 0:
	deltamush.setInput(1, deform.inputs()[0])
]]></script>
  </tool>

  <tool name="object_paintcapturelayer" label="Paint Capture Layer" icon="OBJ_STATE_paintcapturelayer">
    <helpURL>operator:Sop/capturelayerpaint</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericCaptureTool(kwargs, 'capturelayerpaint')]]></script>
  </tool>

  <tool name="sop_capturelayerpaint" label="Capture Layer Paint" icon="SOP_capturelayerpaint">
    <helpURL>operator:Sop/capturelayerpaint</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/capturelayerpaint</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericCaptureTool(kwargs, 'capturelayerpaint')]]></script>
  </tool>
<!--
  <tool name="object_addmuscletosolution" label="Add Muscle to Solution" icon="SOP_capture">
    <helpURL>tool:addmuscletosolution</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils

activepane = toolutils.activePane(kwargs)

if not isinstance(activepane, hou.SceneViewer):
    raise hou.Error('No Scene Viewer detected.')

selection = activepane.selectObjects(
        prompt = 'Select skin to modify the solution of and press Enter.',
        allowed_types = ('geo', ),
        allow_multisel = False)

if not selection:
    activepane.enterViewState()
    raise hou.Error('No skin selected.')

skinnetwork = selection[0]

muscles = activepane.selectObjects(
            prompt = 'Select muscle objects to add to the solution',
            allowed_types = ('muscle', ))

activepane.enterViewState()

if not muscles:
    raise hou.Error('No muscles selected.')

# Attempt to find a metacapture node to add the selected muscles
# to.  If we can't find one, abort.
capturenodes = [child for child in skinnetwork.children()
                if child.type() == hou.nodeType(hou.sopNodeTypeCategory(),
                                                'capturemeta')]

if not capturenodes:
    raise hou.Error('Could not find metacapture node in skin network')

# If more than one capturemete node is found, prompt the user to
# select the one they wish to add to.
if len(capturenodes) > 1:
    # Create a string list of capture node names.
    capturelist = [node.name() for node in capturenodes]

    choice = hou.ui.selectFromList(capturelist,
                                   exclusive = True,
                                   message = 'Select target capture node.',
                                   title = 'Select capture node.')
    capturenode = capturenodes[choice[0]]
else:
    capturenode = capturenodes[0]

# Get the string of relative paths from the capture node to the
# muscles in the solution.
captobjects = capturenode.parm('captobjects').eval()

# For each muscle, get the relative path to the muscle sop inside
# and append it to the solution string.

captobjects += ' ' + ' '.join(
                        [capturenode.relativePathTo(muscle.node('muscle'))
                         for muscle in muscles])

# Set the new list of muscles.
capturenode.parm('captobjects').set(captobjects)

# Attempt to find a capture mirror node and set any mirroring
# of the muscles.
mirrornodes = [child for child in skinnetwork.children()
                if child.type() == hou.nodeType(hou.sopNodeTypeCategory(),
                                                'capturemirror')]

if mirrornodes:
    # If more than one capturemirror node is found, prompt the user to
    # select the one they wish to use.
    if len(mirrornodes) > 1:
        mirrorlist = [node.name() for node in mirrornodes]

        choice = hou.ui.selectFromList(mirrorlist,
                                    exclusive = True,
                                    message = 'Select target mirror node.',
                                    title = 'Select mirror node.')

        mirrornode = mirrornodes[choice[0]]
    else:
        mirrornode = mirrornodes[0]

    # Create 2 sets of muscle lists for use in generating mirroring.
    musclesFrom = set(muscles)
    musclesTo = musclesFrom.copy()

    # Loop through the muscles looking for any that are 'left'.
    for muscle in muscles:
        # If we find one, try and find a corresponding 'right'
        # muscle.
        name = muscle.name()
        if name.find('left') is not -1:
            mirrormuscle =  muscle.node('../'
                                + name.replace('left', 'right'))
            # If we find a corresponding right muscle, remove
            # the right muscle from the 'From' list and the left muscle
            # from the 'To' list if the right muscle is in the list of
            # selected muscles.
            if mirrormuscle and mirrormuscle in muscles:
                musclesFrom.remove(mirrormuscle)
                musclesTo.remove(muscle)

    # Create the mirror strings with the appropriate info.
    # "name/muscle musclename" eg. "muscle_left/muscle muscle_left"
    fromSting = ' '.join(['"' + name + '/muscle '
                        + muscle.parm('musclename').eval() + '"'
                        for muscle in musclesFrom])

    toString = ' '.join(['"' + name + '/muscle '
                        + muscle.parm('musclename').eval() + '"'
                        for muscle in musclesTo])

    # Append the mirror strings to the mirror node parameters.
    mirrornode.parm('from').set(mirrornode.parm('from').eval() + ' ' +
                                 fromSting)

    mirrornode.parm('to').set(mirrornode.parm('to').eval() + ' ' +
                               toString)]]></script>
  </tool>

  <tool name="object_pointmuscles" label="Point Muscles" icon="SOP_muscle">
    <helpURL>tool:pointmuscles</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import charactertoolutils

type = charactertoolutils.multiTypeSelectionTool(kwargs,
                                                 ('twopointmuscle',
                                                  'threepointmuscle',
                                                  'fourpointmuscle'),
                                                 default=0)

if type:
    charactertoolutils.genericPointMuscleTool(kwargs, type)]]></script>
  </tool>

  <tool name="object_twopointmuscle" label="Two Point Muscle" icon="SOP_muscle">
    <helpURL>tool:pointmuscles</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import charactertoolutils

charactertoolutils.genericPointMuscleTool(kwargs, 'twopointmuscle')]]></script>
  </tool>

  <tool name="object_threepointmuscle" label="Three Point Muscle" icon="SOP_muscle">
    <helpURL>tool:pointmuscles</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import charactertoolutils

charactertoolutils.genericPointMuscleTool(kwargs, 'threepointmuscle')]]></script>
  </tool>
  <tool name="object_fourpointmuscle" label="Four Point Muscle" icon="SOP_muscle">
    <helpURL>tool:pointmuscles</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import charactertoolutils

charactertoolutils.genericPointMuscleTool(kwargs, 'fourpointmuscle')]]></script>
  </tool>
-->
  <tool name="object_spotlight" label="Spot Light" icon="OBJ_light_spot">
    <helpURL>tool:spotlight</helpURL>
    <script scriptType="python"><![CDATA[import toolutils
pane = toolutils.activePane(kwargs)

if (pane.pwd().childTypeCategory() == hou.lopNodeTypeCategory()):
    import loptoolutils
    newnode   = loptoolutils.genericCameraLightTool(kwargs, 'light',
		'spotlight1')
    newnode.parm("lighttype").set("UsdLuxDiskLight")
    newnode.parm("spotlightenable").set(1)
    loptoolutils.setGoodLightExposure(kwargs, newnode)
else:
    import objecttoolutils

    kwargs['bbox_min'] = hou.Vector3(-1.5, -1.5, -1.5)
    kwargs['bbox_max'] = hou.Vector3(1.5, 1.5, 1.5)
    newnode = objecttoolutils.genericCameraLightTool(kwargs, 'hlight::2.0',
		'spotlight1')
    objecttoolutils.setGoodLightExposure(kwargs, newnode)
    newnode.parm("light_type").set("point")
    newnode.parm("coneenable").set(1)]]></script>
  </tool>

  <tool name="object_pointlight" label="Point Light" icon="OBJ_light_point">
    <helpURL>tool:pointlight</helpURL>
    <script scriptType="python"><![CDATA[import toolutils
pane = toolutils.activePane(kwargs)

if (pane.pwd().childTypeCategory() == hou.lopNodeTypeCategory()):
    import loptoolutils
    newnode   = loptoolutils.genericCameraLightTool(kwargs, 'light',
		'pointlight1')
    newnode.parm("lighttype").set("point")
    loptoolutils.setGoodLightExposure(kwargs, newnode)
else:
    import objecttoolutils

    kwargs['bbox_min'] = hou.Vector3(-1.5, -1.5, -1.5)
    kwargs['bbox_max'] = hou.Vector3(1.5, 1.5, 1.5)
    newnode = objecttoolutils.genericCameraLightTool(kwargs, 'hlight::2.0',
		'pointlight1')
    objecttoolutils.setGoodLightExposure(kwargs, newnode)
    newnode.parm("light_type").set("point")]]></script>
  </tool>

  <tool name="object_arealight" label="Area Light" icon="OBJ_light_area">
    <helpURL>tool:arealight</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Object/arealight</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Render</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
pane = toolutils.activePane(kwargs)

if (pane.pwd().childTypeCategory() == hou.lopNodeTypeCategory()):
    import loptoolutils
    newnode   = loptoolutils.genericCameraLightTool(kwargs, 'light',
		'arealight1')
    newnode.parm("lighttype").set('UsdLuxRectLight')
    loptoolutils.setGoodLightExposure(kwargs, newnode)
else:
    import objecttoolutils
    kwargs['bbox'] = hou.BoundingBox(-0.5, -0.5, 0.0, 0.5, 0.5, 0.0)

    newnode   = objecttoolutils.genericCameraLightTool(kwargs, 'hlight::2.0',
		'arealight1')
    newnode.parmTuple("stdswitcher4")[0].set(1)
    newnode.parmTuple("atten_folder_1")[0].set(1)
    objecttoolutils.setGoodLightExposure(kwargs, newnode)
    newnode.parm("light_type").set('grid')]]></script>
  </tool>

  <tool name="obj_geolight" label="Geometry Light" icon="OBJ_light_geo">
    <helpURL>tool:geolight</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Object/arealight</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Render</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
pane = toolutils.activePane(kwargs)

if (pane.pwd().childTypeCategory() == hou.lopNodeTypeCategory()):
    import loptoolutils
    newnode   = loptoolutils.genericCameraLightTool(kwargs, 'light',
		'geolight1')
    newnode.parm("lighttype").set('UsdLuxGeometryLight')
    newnode.parm("normalize").set(0)
else:
    import objecttoolutils
    kwargs['bbox'] = hou.BoundingBox(-0.5, -0.5, 0.0, 0.5, 0.5, 0.0)

    # Get selection
    scene_viewer = toolutils.sceneViewer()
    targets = scene_viewer.selectObjects(
		    prompt = toolutils.selectionPrompt(hou.objNodeTypeCategory()),
		    allow_multisel = False,
		    allowed_types = ("geo",))
    newnode = objecttoolutils.genericTool(kwargs, 'hlight::2.0',
		    'geolight1', False)
    newnode.parmTuple("stdswitcher4")[0].set(1)
    newnode.parmTuple("atten_folder_1")[0].set(1)
    if len( targets ) > 0:
	target = targets[0]
	target_path = newnode.relativePathTo( target )
	newnode.setWorldTransform( target.worldTransform() )
	newnode.parm("areageometry").set( target_path )
	target.setDisplayFlag( False )
    newnode.parm("light_type").set('geo')
    newnode.parm("normalizearea").set(0)]]></script>
  </tool>

  <tool name="obj_volumelight" label="Volume Light" icon="SHELF_volumelight">
    <helpURL>tool:volumelight</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Object/arealight</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Render</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
pane = toolutils.activePane(kwargs)

if (pane.pwd().childTypeCategory() == hou.lopNodeTypeCategory()):
    import loptoolutils
    newnode   = loptoolutils.genericCameraLightTool(kwargs, 'light',
		'volumelight1')
    newnode.parm("lighttype").set('UsdLuxGeometryLight')
    newnode.parm("normalize").set(0)
else:
    import objecttoolutils
    kwargs['bbox'] = hou.BoundingBox(-0.5, -0.5, 0.0, 0.5, 0.5, 0.0)

    # Get selection
    scene_viewer = toolutils.sceneViewer()
    targets = scene_viewer.selectObjects(
		    prompt = toolutils.selectionPrompt(hou.objNodeTypeCategory()),
		    allow_multisel = False,
		    allowed_types = ("geo",))
    newnode = objecttoolutils.genericTool(kwargs, 'hlight::2.0',
		    'volumelight1', False)
    newnode.parmTuple("stdswitcher4")[0].set(1)
    newnode.parmTuple("atten_folder_1")[0].set(1)
    if len( targets ) > 0:
	target = targets[0]
	hou.hscript("opproperty -f %s mantra vm_emitillum" % target.path())
	target.parm("vm_emitillum").set(0)
	target_path = newnode.relativePathTo( target )
	newnode.setWorldTransform( target.worldTransform() )
	newnode.parm("shop_materialpath").set( target.parm("shop_materialpath").eval() )
	newnode.parm("areageometry").set( target_path )
    newnode.parm("light_type").set('geo')
    newnode.parm("normalizearea").set(0)
    newnode.parm("selfshadow").set(0)
    newnode.parm("pc_enable").set(1)]]></script>
  </tool>


  <tool name="obj_portallight" label="Portal Light" icon="OBJ_light_portal">
    <helpURL>tool:portallight</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Object/envlight</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Render</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import objecttoolutils

# Get selection
scene_viewer = toolutils.sceneViewer()
targets = scene_viewer.selectObjects(
                prompt = toolutils.selectionPrompt(hou.objNodeTypeCategory()),
                allow_multisel = False,
                allowed_types = ("geo",))
newnode = objecttoolutils.genericTool(kwargs, 'envlight', 'portallight1', False)
newnode.parm("folder01").set(1)
newnode.parm("env_portalenable").set( 1 )
if len( targets ) > 0:
    target = targets[0]
    target_path = newnode.relativePathTo( target )
    newnode.parm("env_portal").set( target_path )]]></script>
  </tool>

  <tool name="object_distantlight" label="Distant Light" icon="OBJ_light_directional">
    <helpURL>tool:distantlight</helpURL>
    <script scriptType="python"><![CDATA[import toolutils
pane = toolutils.activePane(kwargs)

if (pane.pwd().childTypeCategory() == hou.lopNodeTypeCategory()):
    import loptoolutils
    newnode   = loptoolutils.genericCameraLightTool(kwargs, 'light',
		'distantlight1')
    newnode.parm("lighttype").set('UsdLuxDistantLight')
else:
    import objecttoolutils

    kwargs['bbox_min'] = hou.Vector3(-1.5, -1.5, -1.5)
    kwargs['bbox_max'] = hou.Vector3(1.5, 1.5, 1.5)
    newnode = objecttoolutils.genericCameraLightTool(kwargs, 'hlight::2.0',
			    'distantlight1',
			    (not kwargs['ctrlclick'] and not kwargs['cmdclick']))
    newnode.parm("light_type").set('distant')]]></script>
  </tool>

  <tool name="object_envlight" label="Environment Light" icon="OBJ_light_environment">
    <helpURL>operator:Object/envlight</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Object/envlight</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Render</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
pane = toolutils.activePane(kwargs)

if (pane.pwd().childTypeCategory() == hou.lopNodeTypeCategory()):
    import loptoolutils
    newnode   = loptoolutils.genericTool(kwargs, 'domelight',
		'domelight1')
else:
    import objecttoolutils
    from objecttoolutils import OrientInfo

    objecttoolutils.genericTool(kwargs, 'envlight',
	None, False, orient=OrientInfo('r'))]]></script>
  </tool>

  <tool name="obj_skylight" label="Sky Light" icon="OBJ_light_sky">
    <helpURL>tool:skylight</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Object/envlight</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Render</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils

objecttoolutils.createSkyLight(kwargs)
]]></script>
  </tool>

  <tool name="obj_gilight" label="GI Light" icon="OBJ_light_gi">
    <helpURL>tool:gilight</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Object/indirectlight</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Render</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils

objecttoolutils.genericTool(kwargs, 'indirectlight', 'gilight1', False)]]></script>
  </tool>

  <tool name="obj_causticlight" label="Caustic Light" icon="OBJ_light_caustic">
    <helpURL>tool:causticlight</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Object/indirectlight</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Render</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils

newnode = objecttoolutils.genericTool(kwargs, 'indirectlight', 'causticlight1', False)
newnode.parm('light_type').set('caustic')
newnode.parm('photon_filter').set('sphere')
newnode.parm('photon_count').set(100)
newnode.parm('photon_prefilter').set(False)]]></script>
  </tool>

  <tool name="object_cam" label="Camera" icon="OBJ_camera">
    <helpURL>tool:camera</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Object/cam</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Render</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
pane = toolutils.activePane(kwargs)

clicktoplace = (not kwargs['ctrlclick'] and not kwargs['cmdclick'])

if (pane.pwd().childTypeCategory() == hou.lopNodeTypeCategory()):
    import loptoolutils
    newnode = loptoolutils.genericCameraLightTool(kwargs, 'camera',
		'camera1', clicktoplace)
else:
    import objecttoolutils

    kwargs['bbox_min'] = hou.Vector3(-0.1, -0.1, 0.0001)
    kwargs['bbox_max'] = hou.Vector3(0.1, 0.236, 0.431)
    newnode = objecttoolutils.genericCameraLightTool(kwargs, 'cam', 'cam1',
	    clicktoplace)]]></script>
  </tool>

  <tool name="object_stereocamrig" label="Stereo Camera" icon="OBJ_stereocamera">
    <helpURL>operator:Object/stereocamrig</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Object/stereocamrig</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Render</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils

kwargs['bbox'] = hou.BoundingBox(-0.0875, -0.075, 0.0, 0.0875, 0.236, 0.43)
newnode = objecttoolutils.genericCameraLightTool(kwargs, 'stereocamrig',
        'stereocamrig1',
        (not kwargs['ctrlclick'] and not kwargs['cmdclick']))]]></script>
  </tool>

  <tool name="object_vrcam" label="VR Camera" icon="SHOP_vrlens">
    <helpURL>operator:Object/vrcam</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Object/vrcam</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Render</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils

kwargs['bbox'] = hou.BoundingBox(-0.0875, -0.075, 0.0, 0.0875, 0.236, 0.43)
newnode = objecttoolutils.genericCameraLightTool(kwargs, 'vrcam',
        'cam1',
        (not kwargs['ctrlclick'] and not kwargs['cmdclick']))]]></script>
  </tool>

  <tool name="obj_gamepadcamera" label="Gamepad Camera" icon="CHOP_gamepad">
    <helpURL>tool:gamepadcamera</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Object/cam</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Render</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils

cam = objecttoolutils.genericCameraLightTool(kwargs, 'cam', 'cam1',
        (not kwargs['ctrlclick'] and not kwargs['cmdclick']))
kwargs['node'] = cam
objecttoolutils.constraintgamepadStateTool(kwargs)]]></script>
  </tool>

  <tool name="generic_delete" label="Delete" icon="SOP_delete">
    <helpURL>tool:delete</helpURL>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils
import doptoolutils


# find out curr context
active_pane = toolutils.activePane(kwargs)
if active_pane is not None and \
    active_pane.type() == hou.paneTabType.ContextViewer:
    active_pane = active_pane.sceneViewer()

if active_pane is None or active_pane.type() != hou.paneTabType.SceneViewer:
    raise hou.Error("The tool was not invoked in the scene viewer.")

# we determine what selection type we should consider (ie, OBJ, SOP,
#  DOP) based on the viewer network path and the child type
scene_viewer = active_pane
child_type   = scene_viewer.pwd().childTypeCategory()

if child_type == hou.objNodeTypeCategory():
    # object context: delete the object nodes
    prompt = toolutils.selectionPrompt(hou.objNodeTypeCategory())
    selected_objects = list(scene_viewer.selectObjects(prompt))
    for object in selected_objects:
        object.destroy()
    scene_viewer.setCurrentState('select')

elif child_type == hou.sopNodeTypeCategory():
    # geometry context: delete the component (points, edges, primitives)
    prompt = toolutils.selectionPrompt(hou.sopNodeTypeCategory())
    # we cannot consume the selection here as the tool we launch will
    # need to use it, i.e., we act as a preliminary select state here.
    selection = scene_viewer.selectGeometry(prompt=prompt,
					    consume_selections=False)
    type = selection.geometryType()
    if type == hou.geometryType.Primitives \
	     or type == hou.geometryType.Points \
	     or not selection.primitiveTypes():
        node = soptoolutils.genericTool(kwargs, 'blast')
	node.parm('removegrp').set(True)
    else:
        soptoolutils.genericTool(kwargs, 'dissolve::2.0')
elif child_type == hou.dopNodeTypeCategory():
    # dynamics context: remove object or modifier from simulation
    # obtain the selection and separate objects from modifiers
    prompt = toolutils.selectionPrompt(hou.dopNodeTypeCategory())
    selected_dops = list(scene_viewer.selectDynamics(prompt, 0, True, True))
    dop_objects = []
    dop_modifiers = []
    for dop in selected_dops:
        if isinstance(dop, hou.DopObject):
            dop_objects.append( dop )
        elif isinstance(dop, hou.DopData):
            dop_modifiers.append( dop )
    # call functions that remove the dop data and modifiers from simulation
    if len(dop_objects) > 0:
        doptoolutils.dopObjectsRemoveFromSimulation(dop_objects)
    if len(dop_modifiers) > 0:
        doptoolutils.dopModifiersRemoveFromSimulation(dop_modifiers)

]]></script>
  </tool>

  <tool name="assign_material" label="Assign Material" icon="SOP_material">
    <helpURL>tool:assign</helpURL>
    <script scriptType="python"><![CDATA[# assigns a material to objects or geometry
# Argument:
#   kwargs['material_path'] - is a path to the material node to be assigned.
#        If the argument is not present, the viewer is put into Material state

import toolutils
import soptoolutils

# find the pane in which the tool is invoked
active_pane = toolutils.activePane(kwargs)

# determine the name of the material (if it has been passed at all)
material_path = kwargs.get('material_path', '')

# depending on the level the viewer is in, assign either the OBJ or SOP
# version of the material
child_type = active_pane.pwd().childTypeCategory()
if child_type == hou.sopNodeTypeCategory():
    if material_path == '':
        soptoolutils.genericTool(kwargs, 'material')
    else:
        node = soptoolutils.genericTool(kwargs, 'material')
        parm = node.parm('shop_materialpath1')
        if parm is not None:
            parm.set(material_path)
else:
    if material_path == '':
        toolutils.genericStateTool(kwargs, 'objmaterial')
    else:
        prompt = toolutils.selectionPrompt(hou.objNodeTypeCategory())
        selected_objects = list(active_pane.selectObjects(prompt))
        for object in selected_objects:
            parm = object.parm('shop_materialpath')
            if parm is not None:
                parm.set(material_path)
        toolutils.genericStateTool(kwargs, 'select')
]]></script>
  </tool>

  <tool name="generic_hide" label="Hide" icon="SHELF_hide">
    <helpURL>tool:hide</helpURL>
    <script scriptType="python"><![CDATA[import toolutils

active_pane = toolutils.activePane(kwargs)
prompt = toolutils.selectionPrompt(hou.objNodeTypeCategory())
selected_objects = list(active_pane.selectObjects(prompt))
for object in selected_objects:
    object.setDisplayFlag( False )
toolutils.genericStateTool(kwargs, 'objview')]]></script>
  </tool>

  <tool name="generic_cleartexcache" label="Clear Texture Cache" icon="SHELF_clear_texture_cache">
    <helpURL>tool:cleartexcache</helpURL>
    <script scriptType="hscript"><![CDATA[texcache -c]]></script>
  </tool>

  <tool name="sop_fuse::2.0" label="Fuse" icon="SOP_fuse">
    <helpURL>operator:Sop/fuse?version=2.0</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
sop = soptoolutils.genericTool(kwargs, 'fuse::2.0')
sop.parm('consolidatesnappedpoints').set(True)
]]></script>
  </tool>

  <tool name="geometry_snap" label="Snap" icon="SOP_fuse">
    <helpURL>operator:Sop/fuse?version=2.0</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
sop = soptoolutils.genericTool(kwargs, 'fuse::2.0', 'snap1')
sop.parm('consolidatesnappedpoints').set(False)
]]></script>
  </tool>

  <tool name="sop_uvproject" label="UV Project" icon="SOP_uvproject">
    <helpURL>operator:Sop/uvproject</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/uvproject</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Material</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils

sop = soptoolutils.addUVTool(kwargs, 'uvproject', 'uvattrib')
# compute the geometry bounding box and use it for the projection plane
sop.parm('initbbox').pressButton()
]]></script>
  </tool>

  <tool name="sop_uvfuse" label="UV Fuse" icon="SOP_uvfuse">
    <helpURL>operator:Sop/uvfuse</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/uvfuse</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Material</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils

sop = soptoolutils.addUVTool(kwargs, 'uvfuse', 'uvattrib')
]]></script>
  </tool>

  <tool name="sop_texture" label="UV Texture" icon="SOP_texture">
    <helpURL>operator:Sop/texture</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/texture</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Material</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils

sop = soptoolutils.addUVTool(kwargs, 'texture', 'uvattrib')
]]></script>
  </tool>

  <tool name="sop_uvpelt::2.0" label="UV Pelt" icon="SOP_uvpelt">
    <helpURL>operator:Sop/uvpelt?version=2.0</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/uvpelt</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Material</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils

sop = soptoolutils.addUVTool(kwargs, 'uvpelt::2.0', 'uvattrib')
]]></script>
  </tool>

  <tool name="sop_uvunwrap" label="UV Unwrap" icon="SOP_uvunwrap">
    <helpURL>operator:Sop/uvunwrap</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/uvunwrap</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Material</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils

sop = soptoolutils.addUVTool(kwargs, 'uvunwrap', 'uvattrib')
]]></script>
  </tool>

  <tool name="sop_uvlayout::2.0" label="UV Layout" icon="SOP_uvlayout">
    <helpURL>operator:Sop/uvlayout?version=2.0</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/uvlayout::2.0</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Material</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils

sop = soptoolutils.addUVTool(kwargs, 'uvlayout::2.0', 'uvattr')
]]></script>
  </tool>

  <tool name="sop_uvtransform" label="UV Transform" icon="SOP_uvtransform">
    <helpURL>operator:Sop/uvtransform</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/uvtransform</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Material</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils

sop = soptoolutils.addUVTool(kwargs, 'uvtransform', 'uvattrib')
]]></script>
  </tool>

  <tool name="sop_uvtransform::2.0" label="UV Transform" icon="SOP_uvtransform">
    <helpURL>operator:Sop/uvtransform?version=2.0</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/uvtransform::2.0</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Material</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils

sop = soptoolutils.addUVTool(kwargs, 'uvtransform::2.0', 'uvattrib')
]]></script>
  </tool>

  <tool name="sop_uvedit" label="UV Edit" icon="SOP_uvedit">
    <helpURL>operator:Sop/uvedit</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/uvedit</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Material</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils

sop = soptoolutils.addUVTool(kwargs, 'uvedit', 'uvattrib')
]]></script>
  </tool>

<tool name="geometry_unpackusdtopolygons" label="Unpack USD to Polygons" icon="SOP_unpackusd">
    <helpURL>operator:Sop/unpackusd</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/unpackusd</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Pack</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

unpackusd = soptoolutils.genericTool(kwargs, 'unpackusd')
unpackusd.parm('unpack_geomtype').set('polygons')
]]></script>
  </tool>

  <tool name="geometry_file" label="File" icon="SOP_file">
    <helpURL>operator:Sop/file</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Import</toolSubmenu>
    <toolSubmenu>Export</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.chooseAndOpenGeoFile(kwargs, True)]]></script>
  </tool>

  <tool name="cop2_file" label="File" icon="COP2_file">
    <helpURL>operator:Cop2/file</helpURL>
    <toolMenuContext name="cop_viewer">
      <contextNetType>COP2</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Cop2/file</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Import</toolSubmenu>
    <script scriptType="python"><![CDATA[import cop2toolutils

cop2toolutils.chooseAndOpenImageFile(kwargs, True)]]></script>
  </tool>

  <tool name="object_lagobject" label="Lag" icon="CHOP_lag">
    <helpURL>tool:lagobject</helpURL>
    <script scriptType="python"><![CDATA[import toolutils
import choptoolutils

def addLag(input_chop, source_name):
    lag_chop = input_chop.parent().createNode("lag", source_name + "_lag1")
    lag_chop.setInput(0, input_chop)
    lag_chop.moveToGoodPosition()
    lag_chop.parm("scope").set("t[xyz]")
    return lag_chop

scene_viewer = toolutils.sceneViewer()

targets = list(scene_viewer.selectObjects(
    prompt = "Select object to lag and press Enter to complete.",
    allow_multisel = False))
if len(targets) == 0:
    raise hou.Error("Nothing was selected.")
target = targets[0]
target.setSelected(False)

sources = list(scene_viewer.selectObjects(
    prompt = "Now select object to follow, if any, and press Enter to complete.",
    allow_multisel = False))
source = None
if len(sources) > 0:
    source = sources[0]
    source.setSelected(False)

(obj_chop, lag_chop, output_chop) = choptoolutils.modifyObjectTool(
    'lag', source, target, addLag)

output_chop.setExportFlag(True)

choptoolutils.visualizeParmEffect(lag_chop, output_chop)]]></script>
  </tool>

  <tool name="object_jiggleobject" label="Jiggle" icon="CHOP_jiggle">
    <helpURL>tool:jiggleobject</helpURL>
    <script scriptType="python"><![CDATA[import toolutils
import choptoolutils

def addJiggle(input_chop, source_name):
    chop = input_chop.parent().createNode("jiggle", source_name + "_jiggle1")
    chop.setInput(0, input_chop)
    chop.moveToGoodPosition()
    return chop

scene_viewer = toolutils.sceneViewer()

targets = list(scene_viewer.selectObjects(
    prompt = "Select object to jiggle and press Enter to complete.",
    allow_multisel = False))
if len(targets) == 0:
    raise hou.Error("Nothing was selected.")
target = targets[0]
target.setSelected(False)

sources = list(scene_viewer.selectObjects(
    prompt = "Now select object to follow, if any, and press Enter to complete.",
    allow_multisel = False))
source = None
if len(sources) > 0:
    source = sources[0]
    source.setSelected(False)

(obj_chop, jiggle_chop, output_chop) = choptoolutils.modifyObjectTool(
    'jiggle', source, target, addJiggle)

output_chop.setExportFlag(True)

choptoolutils.visualizeParmEffect(jiggle_chop, output_chop)]]></script>
  </tool>

  <tool name="geometry_paintattributes" label="Paint Attributes" icon="SOP_attribpaint">
    <helpURL>operator:Sop/attribpaint</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/attribpaint</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Attribute</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
import toolutils

node = soptoolutils.genericTool(kwargs, 'attribpaint', force_filter=True)
]]></script>
  </tool>

  <tool name="geometry_paintcolorvolume" label="Paint Color Volume" icon="SOP_paintcolorvolume">
    <helpURL>operator:Sop/paintcolorvolume</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Volume</toolSubmenu>
    <script scriptType="python"><![CDATA[
import stroketoolutils

kwargs['type'] = "color"
stroketoolutils.strokeSource(kwargs)
]]></script>
  </tool>

  <tool name="geometry_paintfogvolume" label="Paint Fog Volume" icon="SOP_paintfogvolume">
    <helpURL>operator:Sop/paintfogvolume</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Volume</toolSubmenu>
    <script scriptType="python"><![CDATA[
import stroketoolutils

kwargs['type'] = "fog"
stroketoolutils.strokeSource(kwargs)
]]></script>
  </tool>

  <tool name="geometry_paintsdfvolume" label="Paint SDF Volume" icon="SOP_paintsdfvolume">
    <helpURL>operator:Sop/paintsdfvolume</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Volume</toolSubmenu>
    <script scriptType="python"><![CDATA[
import stroketoolutils

kwargs['type'] = "sdf"
stroketoolutils.strokeSource(kwargs)
]]></script>
  </tool>

  <tool name="geometry_drawcurve" label="Draw Curve" icon="SOP_drawcurve">
    <helpURL>tool:drawcurve</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[
import stroketoolutils

kwargs['type'] = "curve"
stroketoolutils.strokeSource(kwargs)
]]></script>
  </tool>

    <tool name="geometry_spraypaint" label="Spray Paint" icon="SOP_spraypaint">
        <helpURL>tool:spraypaint</helpURL>
        <toolMenuContext name="viewer">
            <contextNetType>OBJ</contextNetType>
            <contextNetType>SOP</contextNetType>
        </toolMenuContext>
        <toolSubmenu>Create</toolSubmenu>
        <script scriptType="python">
            <![CDATA[
import stroketoolutils

kwargs['type'] = "spraypaint"
stroketoolutils.strokeSource(kwargs)
]]>
        </script>
    </tool>

    <tool name="geometry_volumerasterizepoints" label="Fog Points" icon="SOP_volumerasterizepoints">
    <helpURL>operator:Sop/volumerasterizepoints</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Volume</toolSubmenu>
    <script scriptType="python"><![CDATA[
import stroketoolutils

kwargs['type'] = "points"
stroketoolutils.volumerasterizeSource(kwargs)
]]></script>
  </tool>

  <tool name="geometry_volumerasterizeparticles" label="Fog Particles" icon="SOP_volumerasterizeparticles">
    <helpURL>operator:Sop/volumerasterizeparticles</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Volume</toolSubmenu>
    <script scriptType="python"><![CDATA[
import stroketoolutils

kwargs['type'] = "particles"
stroketoolutils.volumerasterizeSource(kwargs)
]]></script>
  </tool>

  <tool name="geometry_volumerasterizecurve" label="Fog Curve" icon="SOP_volumerasterizecurve">
    <helpURL>operator:Sop/volumerasterizecurve</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Volume</toolSubmenu>
    <script scriptType="python"><![CDATA[
import stroketoolutils

kwargs['type'] = "curve"
stroketoolutils.volumerasterizeSource(kwargs)
]]></script>
  </tool>

  <tool name="geometry_vdbfrompolygons" label="SDF Polys" icon="SOP_vdbfrompolygons">
    <helpURL>operator:Sop/vdbfrompolygons</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Volume</toolSubmenu>
    <script scriptType="python"><![CDATA[
import volumetoolutils

kwargs['volumetype'] = "vdb"
kwargs['optype'] = "frompolygons"

volumetoolutils.volumeSource(kwargs)
]]></script>
  </tool>

  <tool name="geometry_vdbfromparticles" label="SDF Particles" icon="SOP_vdbfromparticles">
    <helpURL>operator:Sop/vdbfromparticles</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Volume</toolSubmenu>
    <script scriptType="python"><![CDATA[
import volumetoolutils

kwargs['volumetype'] = "vdb"
kwargs['optype'] = "fromparticles"

volumetoolutils.volumeSource(kwargs)
]]></script>
  </tool>

  <tool name="geometry_convertvdb" label="Convert VDB" icon="SOP_convertvdb">
    <helpURL>operator:Sop/convertvdb</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Volume</toolSubmenu>
    <script scriptType="python"><![CDATA[

import volumetoolutils

kwargs['volumetype'] = "vdb"
kwargs['optype'] = "convert"

volumetoolutils.volumeSource(kwargs)
]]></script>
  </tool>

  <tool name="object_editcaptureblend" label="Edit Capture Blends" icon="OBJ_STATE_editcaptureblend">
    <helpURL>tool:editcaptureblends</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils

objecttoolutils.customStateTool(kwargs, 'editcaptureblend')]]></script>
  </tool>

  <tool name="object_editcaptureweight" label="Edit Capture Weights" icon="OBJ_STATE_editcaptureweight">
    <helpURL>tool:editcaptureweights</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils

objecttoolutils.customStateTool(kwargs, 'editcaptureweight')]]></script>
  </tool>

  <tool name="object_mirrorcapture" label="Mirror Capture Weights" icon="OBJ_STATE_mirrorcapture">
    <helpURL>tool:mirrorcaptureweights</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils

objecttoolutils.customStateTool(kwargs, 'mirrorcapture')]]></script>
  </tool>

  <tool name="object_editcaptureregion" label="Edit Capture Regions" icon="OBJ_STATE_editcaptureregion">
    <helpURL>tool:editcaptureregions</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils

objecttoolutils.customStateTool(kwargs, 'editcaptureregion')]]></script>
  </tool>

  <tool name="object_constraintparentblend" label="Parent Blend" icon="SHELF_parent">
    <helpURL>tool:constraintparentblend</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils

objecttoolutils.constraintparentblendStateTool(kwargs)]]></script>
  </tool>

  <tool name="object_constraintblend" label="Blend" icon="OBJ_blend">
    <helpURL>tool:constraintblend</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils

objecttoolutils.constraintblendStateTool(kwargs)]]></script>
  </tool>

  <tool name="object_constraintlookat" label="Look At" icon="SHELF_lookat">
    <helpURL>tool:constraintlookat</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils
import loptoolutils
import toolutils

cwd = toolutils.sceneViewer().pwd()
mod = loptoolutils if cwd.childTypeCategory() == hou.lopNodeTypeCategory() else objecttoolutils
mod.constraintlookatStateTool(kwargs)]]></script>
  </tool>

  <tool name="object_constraintpath" label="Follow Path" icon="SHELF_followpath">
    <helpURL>tool:constraintpath</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils
import loptoolutils
import toolutils

cwd = toolutils.sceneViewer().pwd()
mod = loptoolutils if cwd.childTypeCategory() == hou.lopNodeTypeCategory() else objecttoolutils
mod.constraintpathStateTool(kwargs)]]></script>
  </tool>

  <tool name="object_constraintsurface" label="Surface" icon="OBJ_sticky">
    <helpURL>tool:constraintsurface</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils
import loptoolutils
import toolutils

cwd = toolutils.sceneViewer().pwd()
mod = loptoolutils if cwd.childTypeCategory() == hou.lopNodeTypeCategory() else objecttoolutils
mod.constraintsurfaceStateTool(kwargs)]]></script>
  </tool>

  <tool name="object_constraintpoints" label="Points" icon="OBJ_rivet">
    <helpURL>tool:constraintpoints</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils
import loptoolutils
import toolutils

cwd = toolutils.sceneViewer().pwd()
mod = loptoolutils if cwd.childTypeCategory() == hou.lopNodeTypeCategory() else objecttoolutils
mod.constraintpointsStateTool(kwargs)]]></script>
  </tool>

  <tool name="object_constraintgamepad" label="Gamepad" icon="CHOP_gamepad">
    <helpURL>tool:constraintgamepad</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils

objecttoolutils.constraintgamepadStateTool(kwargs)]]></script>
  </tool>

  <tool name="object_constrainttransform" label="Transform Constraint" icon="CHOP_constrainttransform">
    <helpURL>tool:transformconstraint</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils
import loptoolutils
import toolutils

cwd = toolutils.sceneViewer().pwd()
if cwd.childTypeCategory() == hou.lopNodeTypeCategory():
    loptoolutils.constraintparentStateTool(kwargs)
else:
    objecttoolutils.constrainttransformStateTool(kwargs)]]></script>
  </tool>

  <tool name="object_constraintdisable" label="Disable Constraints" icon="SHELF_disableconstraints">
    <helpURL>tool:constraintdisable</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils
objecttoolutils.constraintdisableStateTool(kwargs)]]></script>
  </tool>

  <tool name="object_constraintenable" label="Enable Constraints" icon="SHELF_enableconstraints">
    <helpURL>tool:constraintenable</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils
objecttoolutils.constraintenableStateTool(kwargs)]]></script>
  </tool>

  <tool name="object_constraintdelete" label="Delete Constraint" icon="SOP_delete">
    <helpURL>tool:constraintdelete</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils
objecttoolutils.constraintdeleteStateTool(kwargs)]]></script>
  </tool>

  <tool name="object_constrainttoggle" label="Toggle Constraint" icon="SHELF_constraint_toggle">
    <helpURL>tool:constrainttoggle</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils
objecttoolutils.constrainttoggleStateTool(kwargs)]]></script>
  </tool>

  <tool name="object_constraintbake" label="Bake Constraint" icon="SHELF_constraint_bake">
    <helpURL>tool:bakeconstraints</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils
objecttoolutils.constraintbakeStateTool(kwargs)]]></script>
  </tool>

  <tool name="object_bakeanimation" label="Bake Animation" icon="ROP_bakeanimation">
    <helpURL>operator:Driver/bake_animation</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils
objecttoolutils.bakeanimationStateTool(kwargs)]]></script>
  </tool>

  <tool name="chop_transformwrangle" label="Transform Wrangle" icon="SOP_attribwrangle">
    <helpURL>operator:Chop/channelwrangle</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>CHOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Chop/channelwrangle</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Utility</toolSubmenu>
    <script scriptType="python"><![CDATA[
import choptoolutils
import toolutils

node = choptoolutils.genericTool(kwargs, 'channelwrangle')
node.setName('transformwrangle1', unique_name=True)
node.parm('iterate').set('over_trs')
code = "// Fetch transform inputs\n"+"chopTRS c0 = c->fetchInput(0);\n"+"chopTRS c1 = c->fetchInput(1);\n"+"chopTRS c2 = c->fetchInput(2);\n"+"chopTRS c3 = c->fetchInput(3);\n"+"matrix m0 = c->fetchInputMatrix(0);\n"+"matrix m1 = c->fetchInputMatrix(1);\n"+"matrix m2 = c->fetchInputMatrix(2);\n"+"matrix m3 = c->fetchInputMatrix(3);\n"+"\n"+"// Compute transform\n"+"@t = c0.t;\n"+"@r = c0.r;\n"+"@s = c0.s;\n"
node.parm('snippet').set(code)

]]></script>
  </tool>

  <tool name="chop_transformvop" label="Transform VOP" icon="CHOP_vopchop">
    <helpURL>operator:Chop/vopchop</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>CHOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Chop/vopchop</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Utility</toolSubmenu>
    <script scriptType="python"><![CDATA[
import choptoolutils
import toolutils

node = choptoolutils.genericTool(kwargs, 'vopchop')
node.setName('transformvop1', unique_name=True)
node.parm('vex_name').set('tx ty tz rx ry rz sx sy sz')
node.parm('vex_iterate').set('over_trs')
node.node('global1').destroy()
node.node('output1').destroy()
node_get = node.createNode('gettransformchannels')
node_set = node.createNode('settransformchannels')

node_set.setNamedInput('trans', node_get, 'trans')
node_set.setNamedInput('rot', node_get, 'rot')
node_set.setNamedInput('scale', node_get, 'scale')

node.layoutChildren()
]]></script>
  </tool>

  <tool name="rigging_ikfromobjects" label="IK from Objects" icon="OBJ_autorig_blank">
    <helpURL>tool:rigging_ikfromobjects</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[
from rigtoolutils import iktwisttool
iktwisttool.invokeTool(kwargs)
]]></script>
  </tool>

  <tool name="chop_currentframe" label="Current Frame" icon="CHOP_trim">
    <helpURL>operator:Chop/trim</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>CHOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Chop/trim</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Timing</toolSubmenu>
    <script scriptType="python"><![CDATA[
import choptoolutils
import toolutils

node = choptoolutils.genericTool(kwargs, 'trim')
node.setName('currentframe1', unique_name=True)
node.parm('relative').set('cur')
]]></script>
  </tool>

  <tool name="rigging_ikfrombones" label="IK from Bones" icon="OBJ_autorig_blank">
    <helpURL>tool:rigging_ikfrombones</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[
from rigtoolutils import boneiktwisttool
boneiktwisttool.invokeTool(kwargs)
]]></script>
  </tool>

  <tool name="geometry_convexhull" label="Convex Hull" icon="SOP_convexhull">
    <helpURL>operator:Sop/shrinkwrap?version=2.0</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/shrinkwrap::2.0</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Utility</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
import toolutils

node = soptoolutils.genericTool(kwargs, 'shrinkwrap::2.0', force_filter=True)
node.setName('convexhull1', unique_name=True)
node.parm('preserveattribs').set(True)
]]></script>
  </tool>

  <tool name="view_isolate_reset" label="Reset" icon="SHELF_view_isolate_reset">
    <script scriptType="python"><![CDATA[button = 'clear'
p = kwargs["pane"]
v = kwargs["viewport"]

n = "viewportisolator1"
if v:
    n = "viewportisolator_"+p.name() +"_"+v.name()

if not hou.parm("/obj/"+n+'/'+button):
    hou.node("/obj").createNode("viewportisolator",n)
hou.parm("/obj/"+n+'/'+button).pressButton()]]></script>
  </tool>

  <tool name="view_isolate" label="Isolate" icon="SHELF_view_isolate">
    <toolSubmenu>View</toolSubmenu>
    <script scriptType="python"><![CDATA[button = 'isolate'

p = kwargs["pane"]
v = kwargs["viewport"]

n = "viewportisolator1"
if v:
    n = "viewportisolator_"+p.name() +"_"+v.name()

if not hou.parm("/obj/"+n+'/'+button):
    hou.node("/obj").createNode("viewportisolator",n)

if len(hou.selectedNodes())==0:
    if hou.parm("/obj/"+n+'/filters').evalAsInt()==0:
	button = ''
    else:
	button = 'clear'

if button!='':
    hou.parm("/obj/"+n+'/'+button).pressButton()]]></script>
  </tool>

  <tool name="view_isolate_exclude" label="Exclude" icon="SHELF_view_isolate_exclude">
    <toolSubmenu>View</toolSubmenu>
    <script scriptType="python"><![CDATA[
if len(hou.selectedNodes())!=0:
    button = 'exclude'
    p = kwargs["pane"]
    v = kwargs["viewport"]

    n = "viewportisolator1"
    if v:
        n = "viewportisolator_"+p.name() +"_"+v.name()

    if not hou.parm("/obj/"+n+'/'+button):
        hou.node("/obj").createNode("viewportisolator",n)
    hou.parm("/obj/"+n+'/'+button).pressButton()]]></script>
  </tool>

  <tool name="view_isolate_append" label="Append" icon="SHELF_view_isolate_append">
    <toolSubmenu>View</toolSubmenu>
    <script scriptType="python"><![CDATA[

if len(hou.selectedNodes())!=0:
    button = 'append'
    p = kwargs["pane"]
    v = kwargs["viewport"]

    n = "viewportisolator1"
    if v:
        n = "viewportisolator_"+p.name() +"_"+v.name()

    if not hou.parm("/obj/"+n+'/'+button):
        hou.node("/obj").createNode("viewportisolator",n)
    hou.parm("/obj/"+n+'/'+button).pressButton()]]></script>
  </tool>

  <tool name="object_posespacedeform" label="Pose-Space Deform" icon="SOP_posespacedeform">
    <helpURL>tool:posespacedeform</helpURL>
    <script scriptType="python">
        <![CDATA[
import toolutils
toolutils.createOrShowPythonPanel(kwargs, 'sesi_pose_space_deform', 'Pose-Space Deform', 4)]]>
    </script>
  </tool>

  <tool name="pdg_overlaytext" label="Overlay Text" icon="TOP_overlaytext">
    <helpURL>tool:topoverlaytext</helpURL>
    <toolMenuContext name="network">
      <contextNetType>TOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Images</toolSubmenu>
    <script scriptType="python">
      <![CDATA[import toptoolutils
toptoolutils.overlaytextTool(kwargs)
]]>
    </script>
  </tool>

  <tool name="pdg_outputfile" label="Preview Output" icon="SHELF_visualize_pdg_geometry">
  <helpURL>tool:pdg_outputfile</helpURL>
    <script scriptType="python">
      <![CDATA[import toptoolutils
toptoolutils.outputFileTool(kwargs)
]]>
    </script>
  </tool>

  <tool name="toggle_stowbars" label="Toggle Stowbars" icon="SHELF_toggle_stowbars">
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
      <contextNetType>DOP</contextNetType>
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="cop_viewer">
      <contextNetType>COP2</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
      <contextNetType>CHOP</contextNetType>
      <contextNetType>ROP</contextNetType>
      <contextNetType>SHOP</contextNetType>
      <contextNetType>COP2</contextNetType>
      <contextNetType>VOP</contextNetType>
      <contextNetType>VOPNET</contextNetType>
      <contextNetType>DOP</contextNetType>
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>View</toolSubmenu>
    <script scriptType="python"><![CDATA[
b = hou.ui.hideAllMinimizedStowbars()
b = not b

for p in hou.ui.panes():
    p.setShowPaneTabs(not b)
for p in hou.ui.paneTabs():
    if p.type()!=hou.paneTabType.NetworkEditor:
        p.setShowNetworkControls(not b)

    if p.type()==hou.paneTabType.NetworkEditor:
        p.setPref('showmenu',['0','1'][not b])
    elif p.type()==hou.paneTabType.SceneViewer:
        p.showDisplayOptionsBar(not b)
        p.showOperationBar(not b)
        p.showSelectionBar(not b)
        if p.includeColorCorrectionBar():
            p.showColorCorrectionBar(not b)
        if p.includeMemoryBar():
            p.showMemoryBar(not b)
hou.ui.curDesktop().shelfDock().show(not b)
hou.setPreference('showmenu.val',['0','1'][not b])
hou.ui.setHideAllMinimizedStowbars(b)]]></script>
  </tool>

</shelfDocument>
