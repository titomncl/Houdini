<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <tool name="hengine_plugin_installer" label="Plugin Installer" icon="SHELF_download_engine_plugin">
    <helpURL>tool:hengineinstaller</helpURL>
    <script scriptType="python"><![CDATA[import hou
import os
import ctypes
import platform
import shutil
import sys

from hutil.Qt.QtCore import *
from hutil.Qt.QtGui import *
from hutil.Qt.QtWidgets import *



###################################################################################################
# GLOBAL VARS / HELPERS
###################################################################################################

# store the Houdini Version ( 16.5.XXX)
HOU_VERSION = ".".join(map(str, hou.applicationVersion()))
IS_STEAM = False
PRINT_DEBUG = False

# Get platform
os_name = platform.system()
if ( ( os_name == "Win" ) or ( os_name == "Windows" ) or ( "CYGWIN" in os_name) ):
    HOST_OS = "Win"
    import _winreg
elif ( ( os_name == "Darwin" ) or ( os_name == "Mac" ) ):
    HOST_OS = "Mac"
else:
    HOST_OS = "Linux"


#--------------------------------------------------------------------------
# Copy content from source to dest, removing existing files/folders
#--------------------------------------------------------------------------
def copy_content(source, dest):
    # Start by cleaning the destination or the copy will fail
    if ( os.path.isfile( dest ) ):
        os.remove( dest )

    if ( os.path.isdir( dest ) ):
        shutil.rmtree( dest, ignore_errors=True )

    # We can now copy source to dest
    try:
        if ( os.path.isfile( source ) ):
            # Copy a file
            shutil.copy(source, dest)
        else:
            # Copy a directory
            shutil.copytree(source, dest, symlinks=True, ignore=shutil.ignore_patterns('*.pdb'))
    except:
        raise

#--------------------------------------------------------------------------
# Copy content from source to dest, replacing only existing files/folders
#--------------------------------------------------------------------------
def replace_content(source_root, dest_root):
    for src_dir, dirs, files in os.walk(source_root):
        dst_dir = src_dir.replace(source_root, dest_root, 1)
        if not os.path.exists(dst_dir):
            os.makedirs(dst_dir)
        for file_ in files:
            src_file = os.path.join(src_dir, file_)
            dst_file = os.path.join(dst_dir, file_)
            if os.path.exists(dst_file):
                try:
                    os.remove(dst_file)
                except PermissionError as e:
                    os.chmod(dst_file, stat.S_IWUSR)
                    os.remove(dst_file)
            shutil.copy(src_file, dst_dir)


#--------------------------------------------------------------------------
# List Dirs in a dir
#--------------------------------------------------------------------------
def list_dirs( path ):
    for (root, dirs, files) in os.walk(path):
        return dirs

#--------------------------------------------------------------------------
# Debug Print
#--------------------------------------------------------------------------
def debug(text):
    if PRINT_DEBUG:
        print text

#--------------------------------------------------------------------------
# Checks the user has admin rights
#--------------------------------------------------------------------------
def is_admin():
    if HOST_OS == "Win":
        try:
            return ctypes.windll.shell32.IsUserAnAdmin()
        except:
            return False
    else:
        return os.getuid() == 0

#--------------------------------------------------------------------------
# Restarts Houdini with Admin rights
#--------------------------------------------------------------------------
def restart_as_admin():
    if not is_admin():
        # Re-run the program with admin rights
        debug("Restarting Houdini As Admin...")
        ctypes.windll.shell32.ShellExecuteW(None, u"runas", unicode(sys.executable), None, None, 1)


#--------------------------------------------------------------------------
# Explores a path
#--------------------------------------------------------------------------
def explore_to( path ):
    if ( not os.path.isdir( path ) ):
        path = os.path.dirname(os.path.realpath(path))

    if ( not os.path.isdir( path ) ):
        error = "Could not open " + path + " as it's not a valid path."
        hou.ui.displayMessage(error, ('OK',), hou.severityType.Warning)

    # Open an explorer to the directory
    os.startfile(path, 'explore')
        


###################################################################################################
# INSTALL DIALOG
###################################################################################################
class InstallDialog(QDialog):

    #--------------------------------------------------------------------------
    def __init__(self, parent, installer_object):
        super(InstallDialog, self).__init__(parent)
        self.setWindowTitle("Houdini Engine Plugin Installer")
        self.installer_object = installer_object

        if HOST_OS == "Win":
            self.hfs_engine = os.path.join(self.installer_object.HFS, "engine")
        elif HOST_OS == "Mac":
            # Strip out everything from 'Frameworks/...' onwards from HFS path to get the Houdini installation root
            self.installer_object.hfs_root = self.installer_object.HFS.split('Frameworks/Houdini.framework/Versions/Current/Resources')[0]
            self.hfs_engine = os.path.join(self.installer_object.hfs_root, "Houdini Engine")

        self.hostFound = False
        self.hostPluginFound = False
        self.pluginFound = False
        self.build_ui()

    #--------------------------------------------------------------------------
    # Fills the plugin combo with the available plugins in $HFS/engine
    #--------------------------------------------------------------------------
    def fill_combo_plugin(self):
        self.plugin_combo.clear()
        plugin_path = os.path.join(self.hfs_engine, "unreal")
        if ( os.path.isdir( plugin_path ) ):
            self.plugin_combo.addItem("Unreal")
        plugin_path = os.path.join(self.hfs_engine, "maya")
        if ( os.path.isdir( plugin_path ) ):
            self.plugin_combo.addItem("Maya")
        plugin_path = os.path.join(self.hfs_engine, "unity")
        if ( os.path.isdir( plugin_path ) ):
            self.plugin_combo.addItem("Unity")
        if HOST_OS == "Win":
            # 3dsMax is only available on Windows
            plugin_path = os.path.join(self.hfs_engine, "3dsmax")
            if ( os.path.isdir( plugin_path ) ):
                self.plugin_combo.addItem("3dsMax")

    #--------------------------------------------------------------------------
    # Fills the version combo with the available plugins version
    #--------------------------------------------------------------------------
    def fill_combo_version(self):
        host = self.plugin_combo.currentText()
        self.version_combo.clear()
        if ( host == "Unreal" ):
            unreal_path = os.path.join(self.hfs_engine, "unreal")
            dirs = list_dirs( unreal_path )
            for version in reversed(dirs):
                self.version_combo.addItem(version)
        elif ( host == "Maya" ):
            maya_path = os.path.join(self.hfs_engine, "maya")
            dirs = list_dirs( maya_path )
            for version in reversed(dirs):
                self.version_combo.addItem(version.replace("maya", ""))
        elif ( host == "Unity" ):
            unity_path = os.path.join(self.hfs_engine, "unity")
            unity_plugin_path = os.path.join(unity_path, "HoudiniEngineUnity.unitypackage")
            if ( os.path.isfile( unity_plugin_path ) ):
                self.version_combo.addItem("Unity")
            unity_plugin_path = os.path.join(unity_path, "HoudiniEngineUnity_v2_beta.unitypackage")
            if ( os.path.isfile( unity_plugin_path ) ):
                self.version_combo.addItem("beta (v2)")
            unity_plugin_path = os.path.join(unity_path, "houdini-engine.scripts.unitypackage")
            if ( os.path.isfile( unity_plugin_path ) ):
                self.version_combo.addItem("legacy (v1)")
        elif ( host == "3dsMax" ):
            max_path = os.path.join(self.hfs_engine, "3dsmax")
            dirs = list_dirs( max_path )
            for version in reversed( dirs ):
                self.version_combo.addItem(version.replace("3DSMax-", ""))

    #--------------------------------------------------------------------------
    # On Plugin change
    #--------------------------------------------------------------------------
    def on_plugin_change(self, idx):
        self.fill_combo_version()

    #--------------------------------------------------------------------------
    # On Version change
    #    Checks if the host, host plugin and hfs plugin exist
    #--------------------------------------------------------------------------
    def on_version_change(self, idx):
        # find the path to the host app
        host = self.plugin_combo.currentText()
        version = self.version_combo.currentText()

        self.installer_object.host = host
        self.installer_object.version = version

        # Get the host path from registry
        host_path = None
        if ( host == "Unreal" ):
            host_path = self.installer_object.get_unreal_install_path( version )
        elif ( host == "Maya" ):
            host_path = self.installer_object.get_maya_install_path( version )
        elif ( host == "Unity" ):
            host_path = self.installer_object.get_unity_install_path()
        elif ( host == "3dsMax" ):
            host_path = self.installer_object.get_max_install_path( version )

        # Check the Host path exists
        if ( host_path == None ):
            self.hostFound = False
        else:
            os.path.normpath(host_path)
            if ( not os.path.isdir( host_path ) ):
                self.hostFound = False
                self.pluginFound = False
                host_path = None
            else:
                self.hostFound = True

        self.installer_object.hostPath = host_path

        if ( not self.hostFound ):
            host_path = "Could not find " + host + " " + version + "!"

        if ( host == "Unity" ):
            host_path = ""
        self.host_path.setText(host_path)

        # Look if the host already has the plugin installed
        self.check_host_plugin_found()

        # Check we have the corresponding hfs plugin
        self.check_plugin_found()

        # Update the install/uninstall buttons
        self.validate_buttons()

    #--------------------------------------------------------------------------
    # Update the install/uninstall buttons
    #--------------------------------------------------------------------------
    def validate_buttons(self):
        if ( self.hostFound and self.pluginFound ):
            self.installButton.setEnabled( True )
        else:
            self.installButton.setEnabled( False )

        if ( self.hostFound and self.hostPluginFound ):
            self.uninstallButton.setEnabled( True )
        else:
            self.uninstallButton.setEnabled( False )

        if ( self.hostPluginFound ):
            self.installButton.setText("Update")            
        else:
            self.installButton.setText("Install")
            
        if ( self.installer_object.host == "Unity" ):
            self.browseButton.setEnabled( False )
            self.host_path.setEnabled( False )
            self.host_plugin_path.setEnabled( False )
            self.browseHostPluginButton.setEnabled( False )
            self.uninstallButton.setEnabled( True )
        else:
            self.browseButton.setEnabled( True )
            self.host_path.setEnabled( self.hostFound )
            self.host_plugin_path.setEnabled( self.hostFound )
            self.browseHostPluginButton.setEnabled( self.hostFound )

        self.update_status()

    #--------------------------------------------------------------------------
    # Update the status label
    #--------------------------------------------------------------------------
    def update_status(self):
        status = ""
        status2 = ""
        status3 = ""

        host = self.installer_object.host
        version = self.installer_object.version
        host_version = host + " " + version
        if ( not self.pluginFound ):
            status = "<font color='red'>" + host_version + " Plugin not found</font>"
            status2 = "<font color='red'>Please reinstall it via the Houdini Installer</font>"
        elif ( not self.hostFound ):
            status = "<font color='red'>" + host_version + " not found</font>"
            status2 = "<font color='red'>Please select its folder by clicking on the Host Path button</font>"
        else:
            if ( self.hostFound ):
                status = "<font color='green'>" + host_version + " Found</font>"
            if ( self.hostPluginFound ):
                status2 = "<font color='green'>" + host_version + " Plugin already installed</font>"
            else:
                status2 = "<font color='orange'>" + host_version + " Plugin not installed</font>"
                
        if ( self.hostFound ):
            temp_host_path = self.installer_object.hostPath
            temp_host_path = temp_host_path.replace("/", "")
            temp_host_path = temp_host_path.replace("\\", "")            
            host_protected = HOST_OS == "Win" and temp_host_path.lower().startswith("c:program")
            
            if ( host_protected and not is_admin() ):
                status3 = "<font color='red'>" + host_version + " is installed in a protected folder. Admin rights required.</font>"                

        if ( host == "Unity" ):
            status = "<font color='green'>" + host + " Found</font>"
            status2 = "<font color='green'>(The Unity plug-in package needs to be imported manually)</font>"
            status3 = ""
            
        self.status.setText(status)
        self.status2.setText(status2)
        self.status3.setText(status3)


    #--------------------------------------------------------------------------
    # Look for the hfs plugin
    #--------------------------------------------------------------------------
    def check_plugin_found(self):
        self.installer_object.hfsPluginPath = None
        error = None
        hfs = self.installer_object.HFS
        if ( not os.path.isdir( hfs ) ):
            error = "Unable to install plugin: Could not find $HFS!"
            self.pluginFound = False
        else:
            host = self.plugin_combo.currentText()
            if ( host == "Unreal" ):
                engine_host = os.path.join(self.hfs_engine, "unreal")
                if ( not os.path.isdir( engine_host ) ):
                    error = "Unable to install plugin: Could not find $HFS/engine/unreal!"
                    self.pluginFound = False
                else:
                    version = self.version_combo.currentText()
                    engine_host_version = os.path.join(engine_host, version)
                    if ( not os.path.isdir( engine_host_version ) ):
                        error = "Unable to install plugin: Could not find $HFS/engine/unreal/" + version
                        self.pluginFound = False
                    else:
                        plugin_dir = os.path.join( engine_host_version, "HoudiniEngine")
                        if ( not os.path.isdir( plugin_dir ) ):
                            error = "Unable to install plugin: Could not find " + plugin_dir
                            self.pluginFound = False
                        else:
                            self.pluginFound = True
                            self.installer_object.hfsPluginPath = plugin_dir
            elif ( host == "Maya" ):
                engine_host = os.path.join(self.hfs_engine, "maya")
                if ( not os.path.isdir( engine_host ) ):
                    error = "Unable to install plugin: Could not find $HFS/engine/maya!"
                    self.pluginFound = False
                else:
                    version = self.version_combo.currentText()
                    engine_host_version = os.path.join(engine_host, "maya" + version)
                    if ( not os.path.isdir( engine_host_version ) ):
                        error = "Unable to install plugin: Could not find $HFS/engine/maya/maya" + version
                        self.pluginFound = False
                    else:
                        plugin_module_file = os.path.join(engine_host_version, "houdiniEngine-maya" + version)
                        if ( not os.path.isfile( plugin_module_file ) ):
                            error = "Unable to install plugin: Could not find " + plugin_module_file
                            self.pluginFound = False
                        else:
                            self.pluginFound = True
                            self.installer_object.hfsPluginPath = plugin_module_file
            elif ( host == "Unity" ):
                engine_host = os.path.join(self.hfs_engine, "unity")
                if ( not os.path.isdir( engine_host ) ):
                    error = "Unable to install plugin: Could not find $HFS/engine/unity!"
                    self.pluginFound = False
                else:
                    version = self.version_combo.currentText()
                    engine_host_version = engine_host
                    if ( "v2" in version ):
                        engine_host_version = os.path.join(engine_host_version, "HoudiniEngineUnity_v2_beta.unitypackage")
                    elif ( "v1" in version ):
                        engine_host_version = os.path.join(engine_host_version, "houdini-engine.scripts.unitypackage")
                    else:
                        engine_host_version = os.path.join(engine_host_version, "HoudiniEngineUnity.unitypackage")
                    if ( not os.path.isfile( engine_host_version ) ):
                        error = "Unable to install plugin: Could not find the plugin in $HFS/engine/unity"
                        self.pluginFound = False
                    else:
                        self.pluginFound = True
                        self.installer_object.hfsPluginPath = engine_host_version
            elif ( host == "3dsMax" ):
                engine_host = os.path.join(self.hfs_engine, "3dsmax")
                if ( not os.path.isdir( engine_host ) ):
                    error = "Unable to install plugin: Could not find $HFS/engine/3dsmax!"
                    self.pluginFound = False
                else:
                    version = self.version_combo.currentText()
                    engine_host_version = os.path.join(engine_host, "3DSMax-" + version)
                    if ( not os.path.isdir( engine_host_version ) ):
                        error = "Unable to install plugin: Could not find $HFS/engine/3dsmax/3DSMax" + version
                        self.pluginFound = False
                    else:
                        plugin_module_file = os.path.join(engine_host_version, "HoudiniEngineFor3DSMax.dlu")
                        if ( not os.path.isfile( plugin_module_file ) ):
                            error = "Unable to install plugin: Could not find " + plugin_module_file
                            self.pluginFound = False
                        else:
                            self.pluginFound = True
                            self.installer_object.hfsPluginPath = plugin_module_file

            if ( not self.pluginFound ):
                debug(error)
                self.plugin_path.setText("")
            else:
                self.plugin_path.setText(self.installer_object.hfsPluginPath )



    #--------------------------------------------------------------------------
    # Checks if the plugin is already installed for the host
    #--------------------------------------------------------------------------
    def check_host_plugin_found(self):
        self.installer_object.hostPluginPath = None
        host_path = self.installer_object.hostPath
        plugin_path = None
        if ( not self.hostFound ):
            self.pluginFound = False
        else:
            host = self.plugin_combo.currentText()
            if ( host == "Unreal" ):
                plugin_path = self.installer_object.get_unreal_plugin_path( host_path )
                self.installer_object.hostPluginPath = plugin_path
                if ( not os.path.isdir( plugin_path ) ):
                    self.hostPluginFound = False
                else:
                    self.hostPluginFound = True
            elif ( host == "Maya" ):
                version = self.version_combo.currentText()
                plugin_path = self.installer_object.get_maya_plugin_path( host_path, version )
                self.installer_object.hostPluginPath = plugin_path
                if ( not os.path.isfile( plugin_path ) ):
                    self.hostPluginFound = False
                else:
                    self.hostPluginFound = True
            elif ( host == "3dsMax" ):
                plugin_path = self.installer_object.get_max_plugin_path( host_path )
                self.installer_object.hostPluginPath = plugin_path
                if ( not os.path.isfile( plugin_path ) ):
                    self.hostPluginFound = False
                else:
                    self.hostPluginFound = True
            elif ( host == "Unity" ):
                self.hostPluginFound = False
                #plugin_path = "Import Plugin Package"
                plugin_path = ""
        if (plugin_path == None):
            self.host_plugin_path.setText("")
        else:
            self.host_plugin_path.setText(plugin_path)

    #--------------------------------------------------------------------------
    # Build UI
    #--------------------------------------------------------------------------
    def build_ui(self):
        spacer = QLabel("")
        icon_size = hou.ui.scaledSize( 16 )
        button_size = hou.ui.scaledSize( 24 )
        edit_min_size = hou.ui.scaledSize( 320 )
        label_size = hou.ui.scaledSize( 64 )

        # PLUGIN
        plugin_layout = QHBoxLayout()
        plugin_lbl = QLabel("Plugin: ")
        plugin_layout.addWidget(plugin_lbl)

        self.plugin_combo = QComboBox(self)
        self.plugin_combo.setToolTip("Select the plugin you wish to install.")
        self.fill_combo_plugin()
        self.plugin_combo.currentIndexChanged.connect(self.on_plugin_change)
        plugin_layout.addWidget(self.plugin_combo)

        # VERSION
        version_layout = QHBoxLayout()
        version_lbl = QLabel("Version: ")
        version_layout.addWidget(version_lbl)

        self.version_combo = QComboBox(self)
        self.version_combo.setToolTip("Select the version of the host app.")
        self.fill_combo_version()
        self.version_combo.currentIndexChanged.connect(self.on_version_change)
        version_layout.addWidget(self.version_combo)

        # PLUGIN PATH
        plugin_path_layout = QHBoxLayout()
        plugin_path_lbl = QLabel("Plugin Path: ")
        plugin_path_layout.addWidget(plugin_path_lbl)
        
        self.plugin_path = QLineEdit("")
        self.plugin_path.setToolTip("Current path to the Houdini Engine plugin.")
        self.plugin_path.setMinimumWidth(edit_min_size)
        self.plugin_path.setReadOnly( True )
        plugin_path_layout.addWidget(self.plugin_path, 1)
        
        self.browsePluginButton = QPushButton()
        self.browsePluginButton.setToolTip("Browse to the HoudinI Engine plug-in's directory")
        self.browsePluginButton.clicked.connect(self.on_browsepluginbtn_press)
        openicon = hou.ui.createQtIcon( 'BUTTONS_jump', icon_size, icon_size )
        self.browsePluginButton.setIcon(openicon)
        self.browsePluginButton.setMaximumWidth( button_size )
        self.browsePluginButton.setMaximumHeight( button_size )
        plugin_path_layout.addWidget(self.browsePluginButton)
        
        # HENGINE GROUP
        hengine_group = QGroupBox("Houdini Engine")
        hengine_layout = QVBoxLayout()
        hengine_layout.addLayout(plugin_layout)
        hengine_layout.addLayout(version_layout)
        hengine_layout.addLayout(plugin_path_layout)
        hengine_group.setLayout(hengine_layout)



        # HOST PATH
        host_path_layout = QHBoxLayout()

        host_path_lbl = QLabel("Path: ")
        host_path_layout.addWidget(host_path_lbl, 0)
        width = host_path_lbl.fontMetrics().boundingRect("Path: ").width() + 10
        host_path_lbl.setMaximumWidth(width)

        self.host_path = QLineEdit("")
        self.host_path.setToolTip("Current path to the host application.")
        self.host_path.setMinimumWidth( edit_min_size )
        self.host_path.setReadOnly( True )
        host_path_layout.addWidget(self.host_path, 1)

        self.browseButton = QPushButton()
        self.browseButton.setToolTip("Select a custom directory for the host application")
        self.browseButton.clicked.connect(self.on_browsehostbtn_press)
        browseicon = hou.ui.createQtIcon( 'BUTTONS_folder', icon_size, icon_size )
        self.browseButton.setIcon(browseicon)
        self.browseButton.setMaximumWidth( button_size )
        self.browseButton.setMaximumHeight( button_size )
        host_path_layout.addWidget(self.browseButton)

        # HOST PLUGIN PATH
        host_plugin_path_layout = QHBoxLayout()

        host_plugin_path_lbl = QLabel("Plugin Path: ")
        host_plugin_path_layout.addWidget(host_plugin_path_lbl)

        self.host_plugin_path = QLineEdit("")
        self.host_plugin_path.setToolTip("Path to the Houdini Engine plug-in install directory.")
        self.host_plugin_path.setMinimumWidth( edit_min_size )
        self.host_plugin_path.setReadOnly( True )
        host_plugin_path_layout.addWidget(self.host_plugin_path)

        self.browseHostPluginButton = QPushButton()
        self.browseHostPluginButton.setToolTip("Browse to the HoudinI Engine plug-in's directory")
        self.browseHostPluginButton.clicked.connect(self.on_browsehostpluginbtn_press)       
        self.browseHostPluginButton.setIcon(openicon)
        self.browseHostPluginButton.setMaximumWidth( button_size )
        self.browseHostPluginButton.setMaximumHeight( button_size )
        sp_retain = self.browseHostPluginButton.sizePolicy()
        sp_retain.setRetainSizeWhenHidden( True )
        self.browseHostPluginButton.setSizePolicy(sp_retain)
        # self.browseHostPluginButton.setVisible( False )
        host_plugin_path_layout.addWidget(self.browseHostPluginButton)

        # HOST GROUP
        host_group = QGroupBox("Host")
        host_layout = QVBoxLayout()
        host_layout.addLayout(host_path_layout)
        host_layout.addLayout(host_plugin_path_layout)
        host_group.setLayout(host_layout)


        # STATUS
        self.status = QLabel(" ")
        self.status.setAlignment(Qt.AlignCenter)
        self.status2 = QLabel(" ")        
        self.status2.setAlignment(Qt.AlignCenter)
        self.status3 = QLabel(" ")
        self.status3.setAlignment(Qt.AlignCenter)


        # BUTTONS
        self.installButton = QPushButton("Install")
        self.installButton.setToolTip("Installs or updates the selected plugin.")
        self.installButton.clicked.connect(self.on_installbtn_press)

        self.uninstallButton = QPushButton("Uninstall")
        self.uninstallButton.setToolTip("Deletes the currently installed plugin.")
        self.uninstallButton.clicked.connect(self.on_uninstallbtn_press)

        if HOST_OS == "Win":
            # This button is only necessary on Windows for copying files into Program Files
            self.restartAsAdmin = QPushButton("Restart Houdini As Admin")
            self.restartAsAdmin.setToolTip("Restarts the current Houdini Session as an Admin.\nThis is required when the host application is installed in UAC protected directory.")
            self.restartAsAdmin.clicked.connect(self.on_restartasadminbtn_press)
            self.restartAsAdmin.setEnabled( not is_admin() )


        # MAIN LAYOUT
        layout = QVBoxLayout()
        layout.addWidget(hengine_group)
        layout.addWidget(spacer)
        layout.addWidget(host_group)
        layout.addWidget(spacer)
        layout.addWidget(self.status)
        layout.addWidget(self.status2)
        layout.addWidget(self.status3)
        layout.addWidget(spacer)
        layout.addWidget(self.installButton)
        layout.addWidget(self.uninstallButton)

        if HOST_OS == "Win":
            layout.addWidget(self.restartAsAdmin)

        self.setLayout(layout)

        self.on_plugin_change(0)
        self.on_version_change(0)
        self.validate_buttons()

    #--------------------------------------------------------------------------
    # On Install
    #--------------------------------------------------------------------------
    def on_installbtn_press(self):
        plugin = self.plugin_combo.currentText()
        version = self.version_combo.currentText()
        self.installer_object.on_install()
        self.on_version_change(self.version_combo.currentIndex())

    #--------------------------------------------------------------------------
    # On Uninstall
    #--------------------------------------------------------------------------
    def on_uninstallbtn_press(self):
        plugin = self.plugin_combo.currentText()
        version = self.version_combo.currentText()
        self.installer_object.on_uninstall()
        self.on_version_change(self.version_combo.currentIndex())
        
    #--------------------------------------------------------------------------
    # On Restart As Admin
    #--------------------------------------------------------------------------
    def on_restartasadminbtn_press(self):
        if not is_admin():
            debug("Restarting Houdini as an administrator")
            restart_as_admin()
            hou.exit(0)
        else:
            debug("Already an Admin")

    #--------------------------------------------------------------------------
    # On Browse ( HE Plugin )
    #--------------------------------------------------------------------------            
    def on_browsepluginbtn_press(self):
        if not self.pluginFound:
            hou.ui.displayMessage("Could not find the plugin directory.", ('OK',), hou.severityType.Warning)
            
        plugin_dir = self.installer_object.hfsPluginPath
        explore_to( plugin_dir )

    #--------------------------------------------------------------------------
    # On Browse ( Host )
    #--------------------------------------------------------------------------
    def on_browsehostbtn_press(self):
        # Open a directory open dialog
        dlg = QFileDialog()
        dlg.setFileMode(QFileDialog.Directory)
        dlg.setAcceptMode(QFileDialog.AcceptOpen)
        if ( self.hostFound ):
            dlg.setDirectory( self.installer_object.hostPath )

        if dlg.exec_():
            # Get the path and look if a plugin was already installed there
            host_path = dlg.selectedFiles()[0]
            host_path = os.path.normpath(host_path)
            self.host_path.setText( host_path )
            self.installer_object.hostPath = host_path
            self.hostFound = True
            self.check_host_plugin_found()
            self.check_plugin_found()
            self.validate_buttons()

    #--------------------------------------------------------------------------
    # On Browse ( Host Plugin )
    #--------------------------------------------------------------------------            
    def on_browsehostpluginbtn_press(self):
        if not self.hostFound:
            hou.ui.displayMessage("Could not find the host directory.", ('OK',), hou.severityType.Warning)

        plugin_dir = self.installer_object.hostPluginPath
        explore_to( plugin_dir )



###################################################################################################
# HOUDINI ENGINE INSTALLER
###################################################################################################
class HoudiniEngineInstaller(object):

    #--------------------------------------------------------------------------
    def __init__(self):
        self.houdiniVersion = HOU_VERSION;
        self.HFS = os.path.normpath(hou.getenv("HFS"))
        self.host = None
        self.version = None
        self.hostPath = None
        self.hostPluginPath = None
        self.hfsPluginPath = None
        self.show_dialog()

    #--------------------------------------------------------------------------
    def show_dialog(self):
        dialog = InstallDialog(hou.ui.mainQtWindow(), self)
        dialog.show()

    #--------------------------------------------------------------------------
    # UNREAL 
    #--------------------------------------------------------------------------
    
    # Get Unreal's install path from the registry
    def get_unreal_install_path(self, unreal_version):
        if HOST_OS == "Win":
            try:
                # build the registry path
                registry_path = "SOFTWARE\\EpicGames\\Unreal Engine\\" + unreal_version
                # read the registry value
                registry_key = _winreg.OpenKey(_winreg.HKEY_LOCAL_MACHINE, registry_path, 0, _winreg.KEY_READ)
                value, regtype = _winreg.QueryValueEx(registry_key, "InstalledDirectory")
                _winreg.CloseKey(registry_key)
                return value
            except WindowsError:
                return None
        elif HOST_OS == "Mac":
            # Use standard Unreal installation path on macOS
            unreal_path_mac = "/Users/Shared/Epic Games/UE_" + unreal_version
            if os.path.exists(unreal_path_mac):
                return unreal_path_mac
            else:
                return None
        else:
            # TODO: Add Linux install path for Unreal
            return None

    # Get the unreal plugin's intall path
    def get_unreal_plugin_path(self, unreal_path):
            return os.path.normpath(os.path.join(unreal_path, "Engine/Plugins/Runtime/HoudiniEngine"))

    # Install the Unreal plugin
    def install_unreal( self ):
        error = None
        # Make sure the plugin source exist
        if ( not os.path.isdir( self.hfsPluginPath ) ):
            error = "Could not find the plugin in " + self.hfsPluginPath
        else:
            # Copy to the host plugin folder
            try:
                if ( os.path.isdir( self.hostPluginPath ) ):
                    replace_content( self.hfsPluginPath, self.hostPluginPath )
                else:
                    copy_content( self.hfsPluginPath, self.hostPluginPath )
            except:
                error = "Could not copy the plugin in " + self.hfsPluginPath + "\n"
                error += "to " + self.hostPluginPath + "\n"
                error += "Error: " + str(sys.exc_info()[0])

        if ( error == None ):
            self.show_success_dialog("install")
        else:
            self.show_failure_dialog("install", error)

    # Uninstall the unreal plugin
    def uninstall_unreal( self ):
        error = None
        # Get the installed plugin path
        if ( not os.path.isdir( self.hostPluginPath ) ):
            error = "Could not find the plugin in " + self.hfsPluginPath
        else:
            # Delete the existing HoudiniEngine plugin folder in Unreal
            try:
                shutil.rmtree( self.hostPluginPath, ignore_errors=True )
            except:
                error = "Could not delete the plugin in " + self.hfsPluginPath + "\n"
                error += "Error: " + str(sys.exc_info()[0])

        if ( error == None ):
            self.show_success_dialog("uninstall")
        else:
            self.show_failure_dialog("uninstall", error)


    #--------------------------------------------------------------------------
    # MAYA
    #--------------------------------------------------------------------------
    
    # Get Maya's install path from the registry
    def get_maya_install_path(self, maya_version):
        if HOST_OS == "Win":
            try:
                # build the registry path
                registry_path = "SOFTWARE\\Autodesk\\Maya\\" + maya_version + "\\Setup\\InstallPath"
                # read the registry value
                registry_key = _winreg.OpenKey(_winreg.HKEY_LOCAL_MACHINE, registry_path, 0, _winreg.KEY_READ)
                value, regtype = _winreg.QueryValueEx(registry_key, "MAYA_INSTALL_LOCATION")
                _winreg.CloseKey(registry_key)
                return value
            except WindowsError:
                return None
        elif HOST_OS == "Mac":
            # Use standard Maya installation path on macOS
            maya_path_mac = "/Users/Shared/Autodesk/modules/maya/" + maya_version
            if os.path.exists(maya_path_mac):
                return maya_path_mac
            else:
                return None
        else:
            # TODO: Add Linux install path for Maya
            return None

    # Get the maya plugin install path
    def get_maya_plugin_path(self, maya_path, version):
        if HOST_OS == "Win":
            return os.path.normpath(os.path.join(maya_path, "modules/houdiniEngine-maya" + version))
        elif HOST_OS == "Mac":
            return os.path.normpath(os.path.join(maya_path, "houdiniEngine-maya" + version))
        else:
            return None

    # Install the Maya plug-in
    def install_maya( self ):
        error = None
        # Make sure the plugin source exist
        try:
            if ( not os.path.isfile( self.hfsPluginPath ) ):
                error = "Could not find the plugin in " + self.hfsPluginPath
            else:
                # Delete the destination file if it exists
                if ( os.path.isfile( self.hostPluginPath ) ):
                    os.remove( self.hostPluginPath )

                if HOST_OS == "Mac":
                    replace_src = "REPLACE_WITH_DSTROOT"
                    replace_dst = os.path.join(self.hfs_root, "Houdini Engine/maya")
                else:
                    replace_src = "REPLACE_WITH_HFS"
                    replace_dst = self.HFS

                # open the source module file and replace the path in the destination file
                with open(self.hfsPluginPath, "rt") as fin:
                    with open(self.hostPluginPath, "wt") as fout:
                        for line in fin:
                            fout.write(line.replace(replace_src, replace_dst))
        except:
            error = "Could not copy the plugin in " + self.hfsPluginPath + "\n"
            error += "to " + self.hostPluginPath + "\n"
            error += "Error: " + str(sys.exc_info()[0])

        if ( error == None ):
            self.show_success_dialog("install")
        else:
            self.show_failure_dialog("install", error)

    # Uninstall the maya plug-in
    def uninstall_maya( self ):
        error = None
        # Get the installed plugin path
        if ( not os.path.isfile( self.hostPluginPath ) ):
            error = "Could not find the plugin in " + self.hfsPluginPath
        else:
            # Delete the existing HoudiniEngine plugin file in maya's module folder
            try:
                os.remove( self.hostPluginPath )
            except:
                error = "Could not delete the plugin in " + self.hfsPluginPath + "\n"
                error += "Error: " + str(sys.exc_info()[0])

        if ( error == None ):
            self.show_success_dialog("uninstall")
        else:
            self.show_failure_dialog("uninstall", error)

    #--------------------------------------------------------------------------
    # UNITY 
    #--------------------------------------------------------------------------
    
    # Get Unity's install path from the registry
    def get_unity_install_path(self):
        if HOST_OS == "Win":
            try:
                # build the registry path
                registry_path = "SOFTWARE\\Unity Technologies\\Installer\\Unity\\"
                # read the registry value
                registry_key = _winreg.OpenKey(_winreg.HKEY_CURRENT_USER, registry_path, 0, _winreg.KEY_READ)
                value, regtype = _winreg.QueryValueEx(registry_key, "Location x64")
                _winreg.CloseKey(registry_key)
                return value
            except WindowsError:
                return None
        elif HOST_OS == "Mac":
            # Use standard Unity installation path on macOS
            unity_path_mac = "/Applications/Unity"
            if os.path.exists(unity_path_mac):
                return unity_path_mac
            else:
                return None
        else:
            # TODO: Add Linux install path for Unity
            return None

    # Opens a dialog giving instructions on how to import the unity plugin package
    def install_unity( self ):             
        text = "To install the Houdini Engine for Unity Plugin:\n\n"
        text += "Please import the Unity plugin package in your Unity Project.\n\n"
        text += "The plugin package can be found at:\n"
        text += self.hfsPluginPath + "\n\n"
        text += "You can press the 'Browse' button to open the folder containing the plugin's package."
        
        retval = hou.ui.displayMessage(text, ('Browse','OK'), hou.severityType.Message, 0, 1, None, "Unity Plugin Install" )
        if ( retval == 0 ):
            # Open an explorer to the plugin's directory
            explore_to( self.hfsPluginPath )

    # Opens a dialog giving instructions on how to delete the unity plugin
    def uninstall_unity( self ):
        text = "To uninstall the Houdini Engine for Unity Plugin:\n\n"
        text += "Simply delete the 'HoudiniEngine' folder in your Unity Project."
        
        retval = hou.ui.displayMessage(text, ('OK',), hou.severityType.Message, 0, 0, None, "Unity Plugin UnInstall" )



    #--------------------------------------------------------------------------
    # 3DS MAX
    #--------------------------------------------------------------------------

    # Get 3dsMax's install path from the registry
    def get_max_install_path(self, max_version):
        if HOST_OS == "Win":
            version = max_version
            if max_version == "2017":
                version = "19.0"
            elif max_version == "2018":
                version = "20.0"
            elif max_version == "2019":
                version = "21.0"

            # Try to open the first possible registry key
            try:
                registry_path = "SOFTWARE\\Autodesk\\3dsMax\\" + version
                registry_key = _winreg.OpenKey(_winreg.HKEY_LOCAL_MACHINE, registry_path, 0, _winreg.KEY_READ)
            except:
                # Try the second registry key
                debug( "3dsMax registry key not found" )
                try:
                    registry_path = "SOFTWARE\\Autodesk\\3dsMaxDesign\\" + version
                    registry_key = _winreg.OpenKey(_winreg.HKEY_LOCAL_MACHINE, registry_path, 0, _winreg.KEY_READ)
                except:
                    debug( "3dsMaxDesign registry key not found" )
                    return None

            try:
                # Read the install directory from registry
                value, regtype = _winreg.QueryValueEx(registry_key, "Installdir")
                _winreg.CloseKey(registry_key)
                return value
            except WindowsError:
                return None
        else:
            # 3dsMax is not available on other platforms
            return None

    # Get the 3dsMax plugin install path
    def get_max_plugin_path(self, max_path):
        max_plugin_path = os.path.join(max_path, "Plugins")
        return os.path.join(max_plugin_path, "HoudiniEngineFor3DSMax.dlu")

    # Install the 3dsMax plugin
    def install_max( self ):
        error = None
        # Make sure the plugin source exist
        if ( not os.path.isfile( self.hfsPluginPath ) ):
            error = "Could not find the plugin in " + self.hfsPluginPath
        else:
            try:
                # Delete the destination file if it exists
                if ( os.path.isfile( self.hostPluginPath ) ):
                    os.remove( self.hostPluginPath )

                # Copy to the host plugin folder
                copy_content( self.hfsPluginPath, self.hostPluginPath )
            except:
                error = "Could not copy the plugin in " + self.hfsPluginPath + "\n"
                error += "to " + self.hostPluginPath + "\n"
                error += "Error: " + str(sys.exc_info()[0])

        if ( error == None ):
            self.show_success_dialog("install")
        else:
            self.show_failure_dialog("install", error)

    # Uninstall the 3dsMax plugin
    def uninstall_max( self ):
        error = None
        if ( not os.path.isfile( self.hostPluginPath ) ):
            error = "Could not find the plugin in " + self.hfsPluginPath
        else:
            # Delete the existing HoudiniEngine plugin file in 3dsMax's plugin folder
            try:
                os.remove( self.hostPluginPath )
            except:
                error = "Could not delete the plugin in " + self.hfsPluginPath + "\n"
                error += "Error: " + str(sys.exc_info()[0])

        if ( error == None ):
            self.show_success_dialog("uninstall")
        else:
            self.show_failure_dialog("uninstall", error)

    #--------------------------------------------------------------------------
    # SUCCESS DIALOG
    #--------------------------------------------------------------------------
    def show_success_dialog(self, mode):
        msg = QMessageBox()
        msg.setStyleSheet(hou.qt.styleSheet())
        msg.setIcon(QMessageBox.Information)

        if mode == "install":
            msg.setWindowTitle("Install Successfull")
            text = "The Houdini Engine Plugin for " + self.host + " " + self.version + " was installed successfully."
            msg.setText( text )
        elif mode == "uninstall":
            msg.setWindowTitle("Uninstall Successfull")
            text = "The Houdini Engine Plugin for " + self.host + " " + self.version + " was uninstalled successfully."
            msg.setText( text )

        text = "Please restart " + self.host + " " + self.version + "."
        if ( self.host == "Maya" and mode == "install" ):
            text = "The Houdini Engine plugin can now be loaded through Maya's plug-in manager."
        msg.setInformativeText(text)

        retval = msg.exec_()


    #--------------------------------------------------------------------------
    # FAILED DIALOG
    #--------------------------------------------------------------------------
    def show_failure_dialog(self, mode, error):
        msg = QMessageBox()
        msg.setStyleSheet(hou.qt.styleSheet())
        msg.setIcon(QMessageBox.Critical)

        if mode == "install":
            msg.setWindowTitle("Install Failed")
            text = "The Houdini Engine Plugin for " + self.host + " " + self.version + " failed to install properly."
            msg.setText( text )
        elif mode == "uninstall":
            msg.setWindowTitle("Uninstall Failed")
            text = "The Houdini Engine Plugin for " + self.host + " " + self.version + " could not be uninstalled properly."
            msg.setText( text )

        msg.setInformativeText( error )

        retval = msg.exec_()

    #--------------------------------------------------------------------------
    # ON INSTALL
    #--------------------------------------------------------------------------
    def on_install(self):

        debug("Houdini Version: " + self.houdiniVersion)
        debug( "HFS Location: " + self.HFS)
        debug( "Plugin: " + self.host + " " + self.version)
        debug( "Host Location: " + self.hostPath)
        debug( "Plugin source: " + self.hfsPluginPath)

        if ( self.hostPluginPath != None ):
            debug("Plugin destination: " + self.hostPluginPath)

        if self.host == "Unreal":
            self.install_result = self.install_unreal()
        elif self.host == "Maya":
            self.install_result = self.install_maya()
        elif self.host == "Unity":
            self.install_result = self.install_unity()
        elif self.host == "3dsMax":
            self.install_result = self.install_max()


    #--------------------------------------------------------------------------
    # ON UNINSTALL
    #--------------------------------------------------------------------------
    def on_uninstall(self):

        debug("Houdini Version: " + self.houdiniVersion)
        debug("HFS Location: " + self.HFS)
        debug("Plugin: " + self.host + " " + self.version)
        debug("Host Location: " + self.hostPath)
        debug("Plugin source: " + self.hfsPluginPath)
        if ( self.hostPluginPath != None ):
            debug("Plugin destination: " + self.hostPluginPath)

        if self.host == "Unreal":
            self.install_result = self.uninstall_unreal()
        elif self.host == "Maya":
            self.install_result = self.uninstall_maya()
        elif self.host == "Unity":
            self.install_result = self.uninstall_unity()
        elif self.host == "3dsMax":
            self.install_result = self.uninstall_max()



###################################################################################################
# MAIN
###################################################################################################

HoudiniEngineInstaller()


]]></script>
  </tool>
</shelfDocument>
